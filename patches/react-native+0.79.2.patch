diff --git a/node_modules/react-native/ReactCommon/react/renderer/mounting/ShadowTree.cpp b/node_modules/react-native/ReactCommon/react/renderer/mounting/ShadowTree.cpp
index 522ec57..e6ad1df 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/mounting/ShadowTree.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/mounting/ShadowTree.cpp
@@ -22,6 +22,10 @@
 
 namespace facebook::react {
 
+namespace {
+const int MAX_COMMIT_ATTEMPTS_BEFORE_LOCKING = 3;
+} // namespace
+
 using CommitStatus = ShadowTree::CommitStatus;
 using CommitMode = ShadowTree::CommitMode;
 
@@ -207,7 +211,8 @@ void ShadowTree::setCommitMode(CommitMode commitMode) const {
   auto revision = ShadowTreeRevision{};
 
   {
-    std::unique_lock lock(commitMutex_);
+    ShadowTree::UniqueLock lock = uniqueCommitLock();
+
     if (commitMode_ == commitMode) {
       return;
     }
@@ -224,7 +229,7 @@ void ShadowTree::setCommitMode(CommitMode commitMode) const {
 }
 
 CommitMode ShadowTree::getCommitMode() const {
-  std::shared_lock lock(commitMutex_);
+  SharedLock lock = sharedCommitLock();
   return commitMode_;
 }
 
@@ -238,17 +243,17 @@ CommitStatus ShadowTree::commit(
     const CommitOptions& commitOptions) const {
   [[maybe_unused]] int attempts = 0;
 
-  while (true) {
-    attempts++;
-
+  while (attempts < MAX_COMMIT_ATTEMPTS_BEFORE_LOCKING) {
     auto status = tryCommit(transaction, commitOptions);
     if (status != CommitStatus::Failed) {
       return status;
     }
+    attempts++;
+  }
 
-    // After multiple attempts, we failed to commit the transaction.
-    // Something internally went terribly wrong.
-    react_native_assert(attempts < 1024);
+  {
+    std::unique_lock lock(commitMutexRecursive_);
+    return tryCommit(transaction, commitOptions);
   }
 }
 
@@ -266,7 +271,7 @@ CommitStatus ShadowTree::tryCommit(
 
   {
     // Reading `currentRevision_` in shared manner.
-    std::shared_lock lock(commitMutex_);
+    SharedLock lock = sharedCommitLock();
     commitMode = commitMode_;
     oldRevision = currentRevision_;
   }
@@ -307,7 +312,7 @@ CommitStatus ShadowTree::tryCommit(
 
   {
     // Updating `currentRevision_` in unique manner if it hasn't changed.
-    std::unique_lock lock(commitMutex_);
+    UniqueLock lock = uniqueCommitLock();
 
     if (currentRevision_.number != oldRevision.number) {
       return CommitStatus::Failed;
@@ -345,7 +350,7 @@ CommitStatus ShadowTree::tryCommit(
 }
 
 ShadowTreeRevision ShadowTree::getCurrentRevision() const {
-  std::shared_lock lock(commitMutex_);
+  SharedLock lock = sharedCommitLock();
   return currentRevision_;
 }
 
@@ -392,4 +397,12 @@ void ShadowTree::notifyDelegatesOfUpdates() const {
   delegate_.shadowTreeDidFinishTransaction(mountingCoordinator_, true);
 }
 
+inline ShadowTree::UniqueLock ShadowTree::uniqueCommitLock() const {
+  return std::unique_lock{commitMutexRecursive_};
+}
+
+inline ShadowTree::SharedLock ShadowTree::sharedCommitLock() const {
+  return std::unique_lock{commitMutexRecursive_};
+}
+
 } // namespace facebook::react
diff --git a/node_modules/react-native/ReactCommon/react/renderer/mounting/ShadowTree.h b/node_modules/react-native/ReactCommon/react/renderer/mounting/ShadowTree.h
index ae9d005..c3bef0b 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/mounting/ShadowTree.h
+++ b/node_modules/react-native/ReactCommon/react/renderer/mounting/ShadowTree.h
@@ -8,6 +8,8 @@
 #pragma once
 
 #include <memory>
+#include <mutex>
+#include <shared_mutex>
 
 #include <react/renderer/components/root/RootComponentDescriptor.h>
 #include <react/renderer/components/root/RootShadowNode.h>
@@ -139,10 +141,21 @@ class ShadowTree final {
   const SurfaceId surfaceId_;
   const ShadowTreeDelegate& delegate_;
   mutable std::shared_mutex commitMutex_;
+  mutable std::recursive_mutex commitMutexRecursive_;
   mutable CommitMode commitMode_{
       CommitMode::Normal}; // Protected by `commitMutex_`.
   mutable ShadowTreeRevision currentRevision_; // Protected by `commitMutex_`.
   std::shared_ptr<const MountingCoordinator> mountingCoordinator_;
+
+  using UniqueLock = std::variant<
+      std::unique_lock<std::shared_mutex>,
+      std::unique_lock<std::recursive_mutex>>;
+  using SharedLock = std::variant<
+      std::shared_lock<std::shared_mutex>,
+      std::unique_lock<std::recursive_mutex>>;
+
+  inline UniqueLock uniqueCommitLock() const;
+  inline SharedLock sharedCommitLock() const;
 };
 
 } // namespace facebook::react
