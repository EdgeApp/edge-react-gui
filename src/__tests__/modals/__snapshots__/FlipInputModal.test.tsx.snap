// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FlipInputModalComponent should render with loading props 1`] = `
<ThemedModal
  bridge={
    {
      "on": [Function],
      "onResult": [Function],
      "reject": [Function],
      "remove": [Function],
      "resolve": [Function],
    }
  }
  onCancel={[Function]}
>
  <View
    style={
      {
        "flex": 0,
      }
    }
  >
    <View
      style={
        {
          "justifyContent": "flex-start",
        }
      }
    >
      <WithTheme(CardComponent)>
        <ExchangedFlipInput
          exchangeSecondaryToPrimaryRatio="1000"
          headerText="Exchange Header"
          isEditable={true}
          isFiatOnTop={true}
          isFocus={true}
          keyboardVisible={false}
          onError={[Function]}
          onExchangeAmountChanged={[Function]}
          onNext={[Function]}
          overridePrimaryExchangeAmount="0"
          primaryCurrencyInfo={
            {
              "displayCurrencyCode": "BTC",
              "displayDenomination": {
                "multiplier": "100000000000",
                "name": "BTC",
              },
              "exchangeCurrencyCode": "BTC",
              "exchangeDenomination": {
                "multiplier": "100000000000",
                "name": "BTC",
              },
              "tokenId": undefined,
            }
          }
          secondaryCurrencyInfo={
            {
              "displayCurrencyCode": "BTC",
              "displayDenomination": {
                "multiplier": "1",
                "name": "Bitcoin",
              },
              "exchangeCurrencyCode": "BTC",
              "exchangeDenomination": {
                "multiplier": "1",
                "name": "Bitcoin",
              },
            }
          }
        />
        <MiniButton
          alignSelf="center"
          label="MAX"
          marginRem={
            [
              1.2,
              0,
              0,
            ]
          }
          onPress={[Function]}
        />
      </WithTheme(CardComponent)>
    </View>
    <TouchableWithoutFeedback
      onPress={[Function]}
      style={
        {
          "justifyContent": "flex-end",
        }
      }
    >
      <View>
        <View
          style={
            {
              "flexDirection": "row",
              "marginBottom": 22,
              "marginTop": 11,
            }
          }
        >
          <View
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "row",
              }
            }
          >
            <WithTheme(EdgeTextComponent)
              style={
                {
                  "color": "#A4C7DF",
                }
              }
            >
              Fee
            </WithTheme(EdgeTextComponent)>
            <Icon
              allowFontScaling={false}
              name="edit"
              size={17}
              style={
                {
                  "color": "#00f1a2",
                  "marginLeft": 11,
                }
              }
            />
          </View>
          <WithTheme(EdgeTextComponent)
            style={
              {
                "color": "#FFFFFF",
              }
            }
          >
            1 BTC 
            (
            <FiatText
              nativeCryptoAmount="1"
              wallet={{}}
            />
            )
          </WithTheme(EdgeTextComponent)>
        </View>
        <View
          style={
            {
              "flexDirection": "row",
            }
          }
        >
          <WithTheme(EdgeTextComponent)
            style={
              {
                "color": "#A4C7DF",
                "flex": 1,
                "fontSize": 17,
              }
            }
          >
            Rate
          </WithTheme(EdgeTextComponent)>
          <Memo(Connect(WithTheme(ExchangeRateComponent)))
            primaryInfo={
              {
                "displayCurrencyCode": "BTC",
                "displayDenomination": {
                  "multiplier": "100000000000",
                  "name": "BTC",
                },
                "exchangeCurrencyCode": "BTC",
                "exchangeDenomination": {
                  "multiplier": "100000000000",
                  "name": "BTC",
                },
                "tokenId": undefined,
              }
            }
            secondaryDisplayAmount="1000"
            secondaryInfo={
              {
                "displayCurrencyCode": "BTC",
                "displayDenomination": {
                  "multiplier": "1",
                  "name": "Bitcoin",
                },
                "exchangeCurrencyCode": "BTC",
                "exchangeDenomination": {
                  "multiplier": "1",
                  "name": "Bitcoin",
                },
              }
            }
            style={
              {
                "fontSize": 17,
              }
            }
          />
        </View>
        <View
          style={
            {
              "flexDirection": "row",
            }
          }
        >
          <WithTheme(EdgeTextComponent)
            style={
              {
                "color": "#A4C7DF",
                "flex": 1,
                "fontSize": 17,
              }
            }
          >
            Balance
          </WithTheme(EdgeTextComponent)>
          <WithTheme(EdgeTextComponent)
            style={
              {
                "fontSize": 17,
              }
            }
          >
            0.0000001 BTC 
            (
            <FiatText
              nativeCryptoAmount="10000"
              wallet={{}}
            />
            )
          </WithTheme(EdgeTextComponent)>
        </View>
        <WithTheme(EdgeTextComponent)
          numberOfLines={1}
          style={
            [
              {
                "color": "#E85466",
                "fontSize": 17,
              },
              {
                "opacity": 0,
              },
            ]
          }
        >
           
        </WithTheme(EdgeTextComponent)>
      </View>
    </TouchableWithoutFeedback>
  </View>
</ThemedModal>
`;
