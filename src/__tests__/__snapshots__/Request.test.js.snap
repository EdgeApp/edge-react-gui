// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Request should render with loaded props 1`] = `
<SceneWrapper
  background="header"
  hasTabs={false}
>
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "flex-start",
        "paddingHorizontal": 22,
      }
    }
  >
    <View
      style={
        Object {
          "flexDirection": "row",
          "justifyContent": "space-between",
        }
      }
    >
      <WithTheme(EdgeTextComponent)
        style={
          Object {
            "fontFamily": "Quicksand-Medium",
            "fontSize": 45,
          }
        }
      >
        Request
      </WithTheme(EdgeTextComponent)>
      <WithTheme(EdgeTextComponent)
        style={
          Object {
            "alignSelf": "flex-end",
            "fontFamily": "Quicksand-Bold",
            "textAlign": "right",
          }
        }
      >
        1 undefined
      </WithTheme(EdgeTextComponent)>
    </View>
    <View
      style={
        Object {
          "flexDirection": "row",
          "justifyContent": "space-between",
          "marginBottom": 11,
        }
      }
    >
      <WithTheme(EdgeTextComponent)>
        You have 0 undefined
      </WithTheme(EdgeTextComponent)>
      <WithTheme(EdgeTextComponent)
        style={
          Object {
            "alignSelf": "flex-end",
            "fontFamily": "Quicksand-Bold",
            "textAlign": "right",
          }
        }
      >
        <FiatText
          appendFiatCurrencyCode={true}
          nativeCryptoAmount="100000000"
          wallet={
            Object {
              "balances": Object {
                "BTC": "1234",
              },
              "currencyInfo": Object {
                "pluginId": "bitcoin",
              },
            }
          }
        />
      </WithTheme(EdgeTextComponent)>
    </View>
    <WithTheme(CardComponent)>
      <ExchangedFlipInput
        exchangeSecondaryToPrimaryRatio={Object {}}
        forceUpdateGuiCounter={0}
        headerCallback={[Function]}
        headerText="Receive to No name"
        inputAccessoryViewID=""
        isEditable={true}
        isFiatOnTop={true}
        isFocus={false}
        keyboardVisible={false}
        onError={[Function]}
        onExchangeAmountChanged={[Function]}
        onNext={[Function]}
        overridePrimaryExchangeAmount=""
        primaryCurrencyInfo={
          Object {
            "displayDenomination": Object {
              "multiplier": "100000000",
            },
            "exchangeDenomination": Object {
              "multiplier": "100000000",
            },
          }
        }
        secondaryCurrencyInfo={Object {}}
        topReturnKeyType="done"
      />
    </WithTheme(CardComponent)>
    <InputAccessoryView
      backgroundColor="#FFFFFF"
      nativeID="cancelHeaderId"
    >
      <View
        style={
          Object {
            "backgroundColor": "#FFFFFF",
            "flex": 1,
            "flexDirection": "row",
            "justifyContent": "space-between",
          }
        }
      >
        <TouchableOpacity
          onPress={[Function]}
          style={
            Object {
              "paddingHorizontal": 22,
              "paddingVertical": 11,
            }
          }
        >
          <Text
            style={
              Object {
                "color": "#0073D9",
              }
            }
          >
            
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={[Function]}
          style={
            Object {
              "paddingHorizontal": 22,
              "paddingVertical": 11,
            }
          }
        >
          <Text
            style={
              Object {
                "color": "#0073D9",
              }
            }
          >
            Done
          </Text>
        </TouchableOpacity>
      </View>
    </InputAccessoryView>
    <QrCode
      onPress={[Function]}
    />
    <TouchableOpacity
      onPress={[Function]}
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
      >
        <WithTheme(EdgeTextComponent)>
          Your Receiving Wallet Address
        </WithTheme(EdgeTextComponent)>
        <Icon
          allowFontScaling={false}
          color="#66EDA8"
          name="chevron-forward"
          size={34}
        />
      </View>
      <WithTheme(EdgeTextComponent)
        style={
          Object {
            "fontSize": 17,
          }
        }
      >
        
      </WithTheme(EdgeTextComponent)>
    </TouchableOpacity>
  </View>
  <ShareButtons
    copyToClipboard={[Function]}
    fioAddressModal={[Function]}
    shareViaShare={[Function]}
  />
</SceneWrapper>
`;

exports[`Request should render with loading props 1`] = `
<ActivityIndicator
  color="#FFFFFF"
  size="large"
  style={
    Object {
      "alignSelf": "center",
      "flex": 1,
    }
  }
/>
`;
