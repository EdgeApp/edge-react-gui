/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface VelodromePoolV2Interface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_BPS()": FunctionFragment;
    "MAX_REINVEST_BOUNTY()": FunctionFragment;
    "MAX_REINVEST_FEE()": FunctionFragment;
    "MAX_WITHDRAW_FEE_BPS()": FunctionFragment;
    "MINIMUM_LIQUIDITY()": FunctionFragment;
    "MIN_REINVEST_BOUNTY()": FunctionFragment;
    "MIN_REINVEST_FEE()": FunctionFragment;
    "MIN_WITHDRAW_FEE_BPS()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "REINVEST_BOUNTY()": FunctionFragment;
    "REINVEST_FEE()": FunctionFragment;
    "WETH()": FunctionFragment;
    "WITHDRAW_FEE()": FunctionFragment;
    "_initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "_setFactory()": FunctionFragment;
    "addReinvestor(address)": FunctionFragment;
    "adminClaimRewards()": FunctionFragment;
    "adminRescueTokens(address,address[])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "currentCumulativePrices()": FunctionFragment;
    "decimals()": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "factory()": FunctionFragment;
    "gauge()": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "getReward()": FunctionFragment;
    "isReinvestorEnabled(address)": FunctionFragment;
    "isVaultToken()": FunctionFragment;
    "mint(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "observationLength()": FunctionFragment;
    "observations(uint256)": FunctionFragment;
    "optiSwap()": FunctionFragment;
    "pairFactory()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "reinvest()": FunctionFragment;
    "reinvestFeeTo()": FunctionFragment;
    "reinvestorListItem(uint256)": FunctionFragment;
    "reinvestorListLength()": FunctionFragment;
    "removeReinvestor(address)": FunctionFragment;
    "rewardsToken()": FunctionFragment;
    "router()": FunctionFragment;
    "skim(address)": FunctionFragment;
    "stable()": FunctionFragment;
    "symbol()": FunctionFragment;
    "sync()": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "updateReinvestBounty(uint256)": FunctionFragment;
    "updateReinvestFee(uint256)": FunctionFragment;
    "updateReinvestFeeTo(address)": FunctionFragment;
    "updateWithdrawFee(uint256)": FunctionFragment;
    "voter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "MAX_BPS"
      | "MAX_REINVEST_BOUNTY"
      | "MAX_REINVEST_FEE"
      | "MAX_WITHDRAW_FEE_BPS"
      | "MINIMUM_LIQUIDITY"
      | "MIN_REINVEST_BOUNTY"
      | "MIN_REINVEST_FEE"
      | "MIN_WITHDRAW_FEE_BPS"
      | "PERMIT_TYPEHASH"
      | "REINVEST_BOUNTY"
      | "REINVEST_FEE"
      | "WETH"
      | "WITHDRAW_FEE"
      | "_initialize"
      | "_setFactory"
      | "addReinvestor"
      | "adminClaimRewards"
      | "adminRescueTokens"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "currentCumulativePrices"
      | "decimals"
      | "exchangeRate"
      | "factory"
      | "gauge"
      | "getBlockTimestamp"
      | "getReserves"
      | "getReward"
      | "isReinvestorEnabled"
      | "isVaultToken"
      | "mint"
      | "name"
      | "nonces"
      | "observationLength"
      | "observations"
      | "optiSwap"
      | "pairFactory"
      | "permit"
      | "redeem"
      | "reinvest"
      | "reinvestFeeTo"
      | "reinvestorListItem"
      | "reinvestorListLength"
      | "removeReinvestor"
      | "rewardsToken"
      | "router"
      | "skim"
      | "stable"
      | "symbol"
      | "sync"
      | "token0"
      | "token1"
      | "totalBalance"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "underlying"
      | "updateReinvestBounty"
      | "updateReinvestFee"
      | "updateReinvestFeeTo"
      | "updateWithdrawFee"
      | "voter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_REINVEST_BOUNTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REINVEST_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAW_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REINVEST_BOUNTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REINVEST_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WITHDRAW_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REINVEST_BOUNTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REINVEST_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addReinvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminClaimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminRescueTokens",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "currentCumulativePrices",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "gauge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isReinvestorEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "observationLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "observations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "optiSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [string]): string;
  encodeFunctionData(functionFragment: "reinvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reinvestFeeTo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reinvestorListItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reinvestorListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReinvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "skim", values: [string]): string;
  encodeFunctionData(functionFragment: "stable", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateReinvestBounty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReinvestFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReinvestFeeTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWithdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_BPS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REINVEST_BOUNTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REINVEST_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAW_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REINVEST_BOUNTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REINVEST_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WITHDRAW_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REINVEST_BOUNTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REINVEST_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReinvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminClaimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentCumulativePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isReinvestorEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "observationLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "observations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "optiSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reinvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinvestFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinvestorListItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinvestorListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReinvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReinvestBounty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReinvestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReinvestFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Mint(address,address,uint256,uint256)": EventFragment;
    "Redeem(address,address,uint256,uint256)": EventFragment;
    "Reinvest(address,uint256,uint256,uint256)": EventFragment;
    "Sync(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateReinvestBounty(uint256)": EventFragment;
    "UpdateReinvestFee(uint256)": EventFragment;
    "UpdateReinvestFeeTo(address)": EventFragment;
    "UpdateWithdrawFee(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reinvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReinvestBounty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReinvestFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReinvestFeeTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateWithdrawFee"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface MintEventObject {
  sender: string;
  minter: string;
  mintAmount: BigNumber;
  mintTokens: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface RedeemEventObject {
  sender: string;
  redeemer: string;
  redeemAmount: BigNumber;
  redeemTokens: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface ReinvestEventObject {
  caller: string;
  reward: BigNumber;
  bounty: BigNumber;
  fee: BigNumber;
}
export type ReinvestEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ReinvestEventObject
>;

export type ReinvestEventFilter = TypedEventFilter<ReinvestEvent>;

export interface SyncEventObject {
  totalBalance: BigNumber;
}
export type SyncEvent = TypedEvent<[BigNumber], SyncEventObject>;

export type SyncEventFilter = TypedEventFilter<SyncEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateReinvestBountyEventObject {
  _newReinvestBounty: BigNumber;
}
export type UpdateReinvestBountyEvent = TypedEvent<
  [BigNumber],
  UpdateReinvestBountyEventObject
>;

export type UpdateReinvestBountyEventFilter =
  TypedEventFilter<UpdateReinvestBountyEvent>;

export interface UpdateReinvestFeeEventObject {
  _newReinvestFee: BigNumber;
}
export type UpdateReinvestFeeEvent = TypedEvent<
  [BigNumber],
  UpdateReinvestFeeEventObject
>;

export type UpdateReinvestFeeEventFilter =
  TypedEventFilter<UpdateReinvestFeeEvent>;

export interface UpdateReinvestFeeToEventObject {
  _newReinvestFeeTo: string;
}
export type UpdateReinvestFeeToEvent = TypedEvent<
  [string],
  UpdateReinvestFeeToEventObject
>;

export type UpdateReinvestFeeToEventFilter =
  TypedEventFilter<UpdateReinvestFeeToEvent>;

export interface UpdateWithdrawFeeEventObject {
  _newWithdrawFee: BigNumber;
}
export type UpdateWithdrawFeeEvent = TypedEvent<
  [BigNumber],
  UpdateWithdrawFeeEventObject
>;

export type UpdateWithdrawFeeEventFilter =
  TypedEventFilter<UpdateWithdrawFeeEvent>;

export interface VelodromePoolV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VelodromePoolV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MAX_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REINVEST_BOUNTY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REINVEST_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_REINVEST_BOUNTY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_REINVEST_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_WITHDRAW_FEE_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    REINVEST_BOUNTY(overrides?: CallOverrides): Promise<[BigNumber]>;

    REINVEST_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    _initialize(
      _underlying: string,
      _optiSwap: string,
      _router: string,
      _voter: string,
      _pairFactory: string,
      _rewardsToken: string,
      _reinvestFeeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setFactory(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addReinvestor(
      reinvestor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminClaimRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminRescueTokens(
      _to: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentCumulativePrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reserve0Cumulative: BigNumber;
        reserve1Cumulative: BigNumber;
        timestamp: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    gauge(overrides?: CallOverrides): Promise<[string]>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[number]>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        reserve0: BigNumber;
        reserve1: BigNumber;
        blockTimestampLast: number;
      }
    >;

    getReward(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isReinvestorEnabled(
      reinvestor: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVaultToken(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      minter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    observationLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        reserve0Cumulative: BigNumber;
        reserve1Cumulative: BigNumber;
      }
    >;

    optiSwap(overrides?: CallOverrides): Promise<[string]>;

    pairFactory(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeem(
      redeemer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reinvest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reinvestFeeTo(overrides?: CallOverrides): Promise<[string]>;

    reinvestorListItem(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reinvestorListLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeReinvestor(
      reinvestor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    skim(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stable(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    updateReinvestBounty(
      _newReinvestBounty: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateReinvestFee(
      _newReinvestFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateReinvestFeeTo(
      _newReinvestFeeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateWithdrawFee(
      _newWithdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    voter(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REINVEST_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REINVEST_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_REINVEST_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_REINVEST_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WITHDRAW_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  REINVEST_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

  REINVEST_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  _initialize(
    _underlying: string,
    _optiSwap: string,
    _router: string,
    _voter: string,
    _pairFactory: string,
    _rewardsToken: string,
    _reinvestFeeTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setFactory(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addReinvestor(
    reinvestor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminClaimRewards(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminRescueTokens(
    _to: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  currentCumulativePrices(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      reserve0Cumulative: BigNumber;
      reserve1Cumulative: BigNumber;
      timestamp: BigNumber;
    }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  gauge(overrides?: CallOverrides): Promise<string>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<number>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      reserve0: BigNumber;
      reserve1: BigNumber;
      blockTimestampLast: number;
    }
  >;

  getReward(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isReinvestorEnabled(
    reinvestor: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVaultToken(overrides?: CallOverrides): Promise<boolean>;

  mint(
    minter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  observationLength(overrides?: CallOverrides): Promise<BigNumber>;

  observations(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      reserve0Cumulative: BigNumber;
      reserve1Cumulative: BigNumber;
    }
  >;

  optiSwap(overrides?: CallOverrides): Promise<string>;

  pairFactory(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeem(
    redeemer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reinvest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reinvestFeeTo(overrides?: CallOverrides): Promise<string>;

  reinvestorListItem(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reinvestorListLength(overrides?: CallOverrides): Promise<BigNumber>;

  removeReinvestor(
    reinvestor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardsToken(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  skim(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stable(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  sync(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  updateReinvestBounty(
    _newReinvestBounty: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateReinvestFee(
    _newReinvestFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateReinvestFeeTo(
    _newReinvestFeeTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateWithdrawFee(
    _newWithdrawFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  voter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REINVEST_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REINVEST_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REINVEST_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REINVEST_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    REINVEST_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

    REINVEST_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    _initialize(
      _underlying: string,
      _optiSwap: string,
      _router: string,
      _voter: string,
      _pairFactory: string,
      _rewardsToken: string,
      _reinvestFeeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _setFactory(overrides?: CallOverrides): Promise<void>;

    addReinvestor(reinvestor: string, overrides?: CallOverrides): Promise<void>;

    adminClaimRewards(overrides?: CallOverrides): Promise<void>;

    adminRescueTokens(
      _to: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentCumulativePrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reserve0Cumulative: BigNumber;
        reserve1Cumulative: BigNumber;
        timestamp: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    gauge(overrides?: CallOverrides): Promise<string>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<number>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        reserve0: BigNumber;
        reserve1: BigNumber;
        blockTimestampLast: number;
      }
    >;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    isReinvestorEnabled(
      reinvestor: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVaultToken(overrides?: CallOverrides): Promise<boolean>;

    mint(minter: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    observationLength(overrides?: CallOverrides): Promise<BigNumber>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        reserve0Cumulative: BigNumber;
        reserve1Cumulative: BigNumber;
      }
    >;

    optiSwap(overrides?: CallOverrides): Promise<string>;

    pairFactory(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(redeemer: string, overrides?: CallOverrides): Promise<BigNumber>;

    reinvest(overrides?: CallOverrides): Promise<void>;

    reinvestFeeTo(overrides?: CallOverrides): Promise<string>;

    reinvestorListItem(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reinvestorListLength(overrides?: CallOverrides): Promise<BigNumber>;

    removeReinvestor(
      reinvestor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsToken(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    skim(to: string, overrides?: CallOverrides): Promise<void>;

    stable(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;

    updateReinvestBounty(
      _newReinvestBounty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReinvestFee(
      _newReinvestFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReinvestFeeTo(
      _newReinvestFeeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWithdrawFee(
      _newWithdrawFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    voter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Mint(address,address,uint256,uint256)"(
      sender?: string | null,
      minter?: string | null,
      mintAmount?: null,
      mintTokens?: null
    ): MintEventFilter;
    Mint(
      sender?: string | null,
      minter?: string | null,
      mintAmount?: null,
      mintTokens?: null
    ): MintEventFilter;

    "Redeem(address,address,uint256,uint256)"(
      sender?: string | null,
      redeemer?: string | null,
      redeemAmount?: null,
      redeemTokens?: null
    ): RedeemEventFilter;
    Redeem(
      sender?: string | null,
      redeemer?: string | null,
      redeemAmount?: null,
      redeemTokens?: null
    ): RedeemEventFilter;

    "Reinvest(address,uint256,uint256,uint256)"(
      caller?: string | null,
      reward?: null,
      bounty?: null,
      fee?: null
    ): ReinvestEventFilter;
    Reinvest(
      caller?: string | null,
      reward?: null,
      bounty?: null,
      fee?: null
    ): ReinvestEventFilter;

    "Sync(uint256)"(totalBalance?: null): SyncEventFilter;
    Sync(totalBalance?: null): SyncEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UpdateReinvestBounty(uint256)"(
      _newReinvestBounty?: null
    ): UpdateReinvestBountyEventFilter;
    UpdateReinvestBounty(
      _newReinvestBounty?: null
    ): UpdateReinvestBountyEventFilter;

    "UpdateReinvestFee(uint256)"(
      _newReinvestFee?: null
    ): UpdateReinvestFeeEventFilter;
    UpdateReinvestFee(_newReinvestFee?: null): UpdateReinvestFeeEventFilter;

    "UpdateReinvestFeeTo(address)"(
      _newReinvestFeeTo?: null
    ): UpdateReinvestFeeToEventFilter;
    UpdateReinvestFeeTo(
      _newReinvestFeeTo?: null
    ): UpdateReinvestFeeToEventFilter;

    "UpdateWithdrawFee(uint256)"(
      _newWithdrawFee?: null
    ): UpdateWithdrawFeeEventFilter;
    UpdateWithdrawFee(_newWithdrawFee?: null): UpdateWithdrawFeeEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REINVEST_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REINVEST_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REINVEST_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REINVEST_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    REINVEST_BOUNTY(overrides?: CallOverrides): Promise<BigNumber>;

    REINVEST_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    _initialize(
      _underlying: string,
      _optiSwap: string,
      _router: string,
      _voter: string,
      _pairFactory: string,
      _rewardsToken: string,
      _reinvestFeeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setFactory(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    addReinvestor(
      reinvestor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminClaimRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminRescueTokens(
      _to: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentCumulativePrices(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    gauge(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isReinvestorEnabled(
      reinvestor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVaultToken(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      minter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    observationLength(overrides?: CallOverrides): Promise<BigNumber>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optiSwap(overrides?: CallOverrides): Promise<BigNumber>;

    pairFactory(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeem(
      redeemer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reinvest(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    reinvestFeeTo(overrides?: CallOverrides): Promise<BigNumber>;

    reinvestorListItem(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reinvestorListLength(overrides?: CallOverrides): Promise<BigNumber>;

    removeReinvestor(
      reinvestor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    skim(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stable(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    sync(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    updateReinvestBounty(
      _newReinvestBounty: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateReinvestFee(
      _newReinvestFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateReinvestFeeTo(
      _newReinvestFeeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateWithdrawFee(
      _newWithdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    voter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REINVEST_BOUNTY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_REINVEST_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE_BPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_REINVEST_BOUNTY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_REINVEST_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_WITHDRAW_FEE_BPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REINVEST_BOUNTY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REINVEST_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAW_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _initialize(
      _underlying: string,
      _optiSwap: string,
      _router: string,
      _voter: string,
      _pairFactory: string,
      _rewardsToken: string,
      _reinvestFeeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setFactory(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addReinvestor(
      reinvestor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminClaimRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminRescueTokens(
      _to: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentCumulativePrices(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isReinvestorEnabled(
      reinvestor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVaultToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      minter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    observationLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optiSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeem(
      redeemer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reinvest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reinvestFeeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinvestorListItem(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reinvestorListLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeReinvestor(
      reinvestor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skim(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateReinvestBounty(
      _newReinvestBounty: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateReinvestFee(
      _newReinvestFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateReinvestFeeTo(
      _newReinvestFeeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateWithdrawFee(
      _newWithdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
