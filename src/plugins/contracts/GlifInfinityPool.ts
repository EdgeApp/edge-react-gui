/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type VerifiableCredentialStruct = {
  issuer: string;
  subject: BigNumberish;
  epochIssued: BigNumberish;
  epochValidUntil: BigNumberish;
  value: BigNumberish;
  action: BytesLike;
  target: BigNumberish;
  claim: BytesLike;
};

export type VerifiableCredentialStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  issuer: string;
  subject: BigNumber;
  epochIssued: BigNumber;
  epochValidUntil: BigNumber;
  value: BigNumber;
  action: string;
  target: BigNumber;
  claim: string;
};

export type AccountStruct = {
  startEpoch: BigNumberish;
  principal: BigNumberish;
  epochsPaid: BigNumberish;
  defaulted: boolean;
};

export type AccountStructOutput = [BigNumber, BigNumber, BigNumber, boolean] & {
  startEpoch: BigNumber;
  principal: BigNumber;
  epochsPaid: BigNumber;
  defaulted: boolean;
};

export interface GlifInfinityPoolInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "asset()": FunctionFragment;
    "borrow((address,uint256,uint256,uint256,uint256,bytes4,uint64,bytes))": FunctionFragment;
    "convertToAssets(uint256)": FunctionFragment;
    "convertToShares(uint256)": FunctionFragment;
    "decommissionPool(address)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "deposit(address)": FunctionFragment;
    "feesCollected()": FunctionFragment;
    "getAbsMinLiquidity()": FunctionFragment;
    "getAgentBorrowed(uint256)": FunctionFragment;
    "getLiquidAssets()": FunctionFragment;
    "getRate((address,uint256,uint256,uint256,uint256,bytes4,uint64,bytes))": FunctionFragment;
    "harvestFees(uint256)": FunctionFragment;
    "harvestToRamp()": FunctionFragment;
    "id()": FunctionFragment;
    "isApproved((uint256,uint256,uint256,bool),(address,uint256,uint256,uint256,uint256,bytes4,uint64,bytes))": FunctionFragment;
    "isShuttingDown()": FunctionFragment;
    "jumpStartAccount(address,uint256,uint256)": FunctionFragment;
    "jumpStartTotalBorrowed(uint256)": FunctionFragment;
    "liquidStakingToken()": FunctionFragment;
    "maxDeposit(address)": FunctionFragment;
    "maxEpochsOwedTolerance()": FunctionFragment;
    "maxMint(address)": FunctionFragment;
    "maxRedeem(address)": FunctionFragment;
    "maxWithdraw(address)": FunctionFragment;
    "minimumLiquidity()": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pay((address,uint256,uint256,uint256,uint256,bytes4,uint64,bytes))": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "preStake()": FunctionFragment;
    "previewDeposit(uint256)": FunctionFragment;
    "previewMint(uint256)": FunctionFragment;
    "previewRedeem(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "ramp()": FunctionFragment;
    "rateModule()": FunctionFragment;
    "recoverERC20(address,address)": FunctionFragment;
    "recoverFIL(address)": FunctionFragment;
    "redeem(uint256,address,address)": FunctionFragment;
    "refreshRoutes()": FunctionFragment;
    "setMaxEpochsOwedTolerance(uint256)": FunctionFragment;
    "setMinimumLiquidity(uint256)": FunctionFragment;
    "setRamp(address)": FunctionFragment;
    "setRateModule(address)": FunctionFragment;
    "shutDown()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalBorrowableAssets()": FunctionFragment;
    "totalBorrowed()": FunctionFragment;
    "transferFromPreStake(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256,address,address)": FunctionFragment;
    "writeOff(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "asset"
      | "borrow"
      | "convertToAssets"
      | "convertToShares"
      | "decommissionPool"
      | "deposit(uint256,address)"
      | "deposit(address)"
      | "feesCollected"
      | "getAbsMinLiquidity"
      | "getAgentBorrowed"
      | "getLiquidAssets"
      | "getRate"
      | "harvestFees"
      | "harvestToRamp"
      | "id"
      | "isApproved"
      | "isShuttingDown"
      | "jumpStartAccount"
      | "jumpStartTotalBorrowed"
      | "liquidStakingToken"
      | "maxDeposit"
      | "maxEpochsOwedTolerance"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "minimumLiquidity"
      | "mint"
      | "owner"
      | "pay"
      | "pendingOwner"
      | "preStake"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "ramp"
      | "rateModule"
      | "recoverERC20"
      | "recoverFIL"
      | "redeem"
      | "refreshRoutes"
      | "setMaxEpochsOwedTolerance"
      | "setMinimumLiquidity"
      | "setRamp"
      | "setRateModule"
      | "shutDown"
      | "totalAssets"
      | "totalBorrowableAssets"
      | "totalBorrowed"
      | "transferFromPreStake"
      | "transferOwnership"
      | "withdraw"
      | "writeOff"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [VerifiableCredentialStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decommissionPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAbsMinLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentBorrowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRate",
    values: [VerifiableCredentialStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestToRamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [AccountStruct, VerifiableCredentialStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isShuttingDown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jumpStartAccount",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jumpStartTotalBorrowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidStakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxDeposit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxEpochsOwedTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxMint", values: [string]): string;
  encodeFunctionData(functionFragment: "maxRedeem", values: [string]): string;
  encodeFunctionData(functionFragment: "maxWithdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minimumLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [VerifiableCredentialStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "preStake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ramp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "recoverFIL", values: [string]): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshRoutes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxEpochsOwedTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRamp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRateModule",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "shutDown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowableAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromPreStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeOff",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decommissionPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAbsMinLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestToRamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isShuttingDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jumpStartAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jumpStartTotalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxEpochsOwedTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "preStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ramp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rateModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverFIL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxEpochsOwedTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRateModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutDown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowableAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromPreStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writeOff", data: BytesLike): Result;

  events: {
    "Borrow(uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "Pay(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
    "WriteOff(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WriteOff"): EventFragment;
}

export interface BorrowEventObject {
  agent: BigNumber;
  amount: BigNumber;
}
export type BorrowEvent = TypedEvent<[BigNumber, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface PayEventObject {
  agent: BigNumber;
  rate: BigNumber;
  epochsPaid: BigNumber;
  principalPaid: BigNumber;
  refund: BigNumber;
}
export type PayEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  PayEventObject
>;

export type PayEventFilter = TypedEventFilter<PayEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WriteOffEventObject {
  agentID: BigNumber;
  recoveredFunds: BigNumber;
  lostFunds: BigNumber;
  interestPaid: BigNumber;
}
export type WriteOffEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  WriteOffEventObject
>;

export type WriteOffEventFilter = TypedEventFilter<WriteOffEvent>;

export interface GlifInfinityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlifInfinityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      vc: VerifiableCredentialStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decommissionPool(
      newPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(address)"(
      receiver: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    feesCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAbsMinLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAgentBorrowed(
      agentID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLiquidAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRate(
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rate: BigNumber }>;

    harvestFees(
      harvestAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    harvestToRamp(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApproved(
      account: AccountStruct,
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { approved: boolean }>;

    isShuttingDown(overrides?: CallOverrides): Promise<[boolean]>;

    jumpStartAccount(
      receiver: string,
      agentID: BigNumberish,
      accountPrincipal: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    jumpStartTotalBorrowed(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidStakingToken(overrides?: CallOverrides): Promise<[string]>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxEpochsOwedTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pay(
      vc: VerifiableCredentialStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    preStake(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ramp(overrides?: CallOverrides): Promise<[string]>;

    rateModule(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      receiver: string,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recoverFIL(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    refreshRoutes(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxEpochsOwedTolerance(
      _maxEpochsOwedTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinimumLiquidity(
      _minimumLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRamp(
      _ramp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRateModule(
      _rateModule: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    shutDown(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrowableAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFromPreStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    writeOff(
      agentID: BigNumberish,
      recoveredFunds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  borrow(
    vc: VerifiableCredentialStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  convertToAssets(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decommissionPool(
    newPool: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    assets: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(address)"(
    receiver: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  feesCollected(overrides?: CallOverrides): Promise<BigNumber>;

  getAbsMinLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  getAgentBorrowed(
    agentID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidAssets(overrides?: CallOverrides): Promise<BigNumber>;

  getRate(
    vc: VerifiableCredentialStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvestFees(
    harvestAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  harvestToRamp(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  isApproved(
    account: AccountStruct,
    vc: VerifiableCredentialStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isShuttingDown(overrides?: CallOverrides): Promise<boolean>;

  jumpStartAccount(
    receiver: string,
    agentID: BigNumberish,
    accountPrincipal: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  jumpStartTotalBorrowed(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidStakingToken(overrides?: CallOverrides): Promise<string>;

  maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxEpochsOwedTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  minimumLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    shares: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pay(
    vc: VerifiableCredentialStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  preStake(overrides?: CallOverrides): Promise<string>;

  previewDeposit(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ramp(overrides?: CallOverrides): Promise<string>;

  rateModule(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    receiver: string,
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recoverFIL(
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeem(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  refreshRoutes(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxEpochsOwedTolerance(
    _maxEpochsOwedTolerance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinimumLiquidity(
    _minimumLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRamp(
    _ramp: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRateModule(
    _rateModule: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  shutDown(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrowableAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  transferFromPreStake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  writeOff(
    agentID: BigNumberish,
    recoveredFunds: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    asset(overrides?: CallOverrides): Promise<string>;

    borrow(
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decommissionPool(
      newPool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(address)"(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    getAbsMinLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getAgentBorrowed(
      agentID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestFees(
      harvestAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    harvestToRamp(overrides?: CallOverrides): Promise<void>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    isApproved(
      account: AccountStruct,
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isShuttingDown(overrides?: CallOverrides): Promise<boolean>;

    jumpStartAccount(
      receiver: string,
      agentID: BigNumberish,
      accountPrincipal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    jumpStartTotalBorrowed(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidStakingToken(overrides?: CallOverrides): Promise<string>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxEpochsOwedTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    minimumLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pay(
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        epochsPaid: BigNumber;
        principalPaid: BigNumber;
        refund: BigNumber;
      }
    >;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    preStake(overrides?: CallOverrides): Promise<string>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ramp(overrides?: CallOverrides): Promise<string>;

    rateModule(overrides?: CallOverrides): Promise<string>;

    recoverERC20(
      receiver: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverFIL(receiver: string, overrides?: CallOverrides): Promise<void>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refreshRoutes(overrides?: CallOverrides): Promise<void>;

    setMaxEpochsOwedTolerance(
      _maxEpochsOwedTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumLiquidity(
      _minimumLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRamp(_ramp: string, overrides?: CallOverrides): Promise<void>;

    setRateModule(
      _rateModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shutDown(overrides?: CallOverrides): Promise<void>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowableAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    transferFromPreStake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writeOff(
      agentID: BigNumberish,
      recoveredFunds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Borrow(uint256,uint256)"(
      agent?: BigNumberish | null,
      amount?: null
    ): BorrowEventFilter;
    Borrow(agent?: BigNumberish | null, amount?: null): BorrowEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      caller?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      caller?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    "Pay(uint256,uint256,uint256,uint256,uint256)"(
      agent?: BigNumberish | null,
      rate?: null,
      epochsPaid?: null,
      principalPaid?: null,
      refund?: null
    ): PayEventFilter;
    Pay(
      agent?: BigNumberish | null,
      rate?: null,
      epochsPaid?: null,
      principalPaid?: null,
      refund?: null
    ): PayEventFilter;

    "Withdraw(address,address,address,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;

    "WriteOff(uint256,uint256,uint256,uint256)"(
      agentID?: BigNumberish | null,
      recoveredFunds?: null,
      lostFunds?: null,
      interestPaid?: null
    ): WriteOffEventFilter;
    WriteOff(
      agentID?: BigNumberish | null,
      recoveredFunds?: null,
      lostFunds?: null,
      interestPaid?: null
    ): WriteOffEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      vc: VerifiableCredentialStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decommissionPool(
      newPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(address)"(
      receiver: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    feesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    getAbsMinLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    getAgentBorrowed(
      agentID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestFees(
      harvestAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    harvestToRamp(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    isApproved(
      account: AccountStruct,
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isShuttingDown(overrides?: CallOverrides): Promise<BigNumber>;

    jumpStartAccount(
      receiver: string,
      agentID: BigNumberish,
      accountPrincipal: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    jumpStartTotalBorrowed(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidStakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxEpochsOwedTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    minimumLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      vc: VerifiableCredentialStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    preStake(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ramp(overrides?: CallOverrides): Promise<BigNumber>;

    rateModule(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      receiver: string,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recoverFIL(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    refreshRoutes(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxEpochsOwedTolerance(
      _maxEpochsOwedTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinimumLiquidity(
      _minimumLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRamp(
      _ramp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRateModule(
      _rateModule: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    shutDown(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowableAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    transferFromPreStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    writeOff(
      agentID: BigNumberish,
      recoveredFunds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      vc: VerifiableCredentialStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decommissionPool(
      newPool: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(address)"(
      receiver: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feesCollected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAbsMinLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgentBorrowed(
      agentID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRate(
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestFees(
      harvestAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    harvestToRamp(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApproved(
      account: AccountStruct,
      vc: VerifiableCredentialStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isShuttingDown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jumpStartAccount(
      receiver: string,
      agentID: BigNumberish,
      accountPrincipal: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    jumpStartTotalBorrowed(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidStakingToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxEpochsOwedTolerance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay(
      vc: VerifiableCredentialStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ramp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      receiver: string,
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recoverFIL(
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    refreshRoutes(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxEpochsOwedTolerance(
      _maxEpochsOwedTolerance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinimumLiquidity(
      _minimumLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRamp(
      _ramp: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRateModule(
      _rateModule: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    shutDown(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowableAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBorrowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFromPreStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    writeOff(
      agentID: BigNumberish,
      recoveredFunds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
