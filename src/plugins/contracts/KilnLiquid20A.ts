/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type Native20ConfigurationStruct = {
  name: string;
  symbol: string;
  admin: string;
  pools: string[];
  poolFees: BigNumberish[];
  commissionRecipients: string[];
  commissionDistribution: BigNumberish[];
  poolPercentages: BigNumberish[];
  maxCommissionBps: BigNumberish;
  monoTicketThreshold: BigNumberish;
};

export type Native20ConfigurationStructOutput = [
  string,
  string,
  string,
  string[],
  BigNumber[],
  string[],
  BigNumber[],
  BigNumber[],
  BigNumber,
  BigNumber
] & {
  name: string;
  symbol: string;
  admin: string;
  pools: string[];
  poolFees: BigNumber[];
  commissionRecipients: string[];
  commissionDistribution: BigNumber[];
  poolPercentages: BigNumber[];
  maxCommissionBps: BigNumber;
  monoTicketThreshold: BigNumber;
};

export interface KilnLiquid20AInterface extends utils.Interface {
  functions: {
    "_getPool(uint256)": FunctionFragment;
    "acceptAdmin()": FunctionFragment;
    "addPool(address,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfUnderlying(address)": FunctionFragment;
    "changeFee(uint256,uint256)": FunctionFragment;
    "changeSplit(address[],uint256[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "depositsPaused()": FunctionFragment;
    "exitCommissionShares(uint256)": FunctionFragment;
    "getCurrentSplit()": FunctionFragment;
    "getFee(uint256)": FunctionFragment;
    "getPoolActivation(uint256)": FunctionFragment;
    "initialize((string,string,address,address[],uint256[],address[],uint256[],uint256[],uint256,uint256))": FunctionFragment;
    "integratorCommissionOwed(uint256)": FunctionFragment;
    "multiClaim(address[],uint256[][],uint32[][])": FunctionFragment;
    "multiResolve(address[],uint256[][])": FunctionFragment;
    "name()": FunctionFragment;
    "onvPoolSharesReceived(address,address,uint256,bytes)": FunctionFragment;
    "pauseDeposits(bool)": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "pools()": FunctionFragment;
    "rate()": FunctionFragment;
    "requestExit(uint256)": FunctionFragment;
    "setMonoTicketThreshold(uint256)": FunctionFragment;
    "setPoolActivation(uint256,bool,uint256[])": FunctionFragment;
    "setPoolPercentages(uint256[])": FunctionFragment;
    "stake()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalUnderlyingSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferAdmin(address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdrawCommission()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_getPool"
      | "acceptAdmin"
      | "addPool"
      | "admin"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfUnderlying"
      | "changeFee"
      | "changeSplit"
      | "decimals"
      | "depositsPaused"
      | "exitCommissionShares"
      | "getCurrentSplit"
      | "getFee"
      | "getPoolActivation"
      | "initialize"
      | "integratorCommissionOwed"
      | "multiClaim"
      | "multiResolve"
      | "name"
      | "onvPoolSharesReceived"
      | "pauseDeposits"
      | "pendingAdmin"
      | "pools"
      | "rate"
      | "requestExit"
      | "setMonoTicketThreshold"
      | "setPoolActivation"
      | "setPoolPercentages"
      | "stake"
      | "symbol"
      | "totalSupply"
      | "totalUnderlyingSupply"
      | "transfer"
      | "transferAdmin"
      | "transferFrom"
      | "withdrawCommission"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_getPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSplit",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositsPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitCommissionShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSplit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolActivation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [Native20ConfigurationStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "integratorCommissionOwed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiClaim",
    values: [string[], BigNumberish[][], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiResolve",
    values: [string[], BigNumberish[][]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onvPoolSharesReceived",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDeposits",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestExit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMonoTicketThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolActivation",
    values: [BigNumberish, boolean, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPercentages",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCommission",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitCommissionShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "integratorCommissionOwed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onvPoolSharesReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMonoTicketThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCommission",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CommissionSharesSold(uint256,uint256,uint256)": EventFragment;
    "CommissionWithdrawn(address,uint256)": EventFragment;
    "Initialized(uint256,bytes)": EventFragment;
    "NewCommissionSplit(address[],uint256[])": EventFragment;
    "PoolActivation(address,uint256,bool)": EventFragment;
    "PoolAdded(address,uint256)": EventFragment;
    "SetAdmin(address)": EventFragment;
    "SetDepositsPaused(bool)": EventFragment;
    "SetFee(uint256,uint256)": EventFragment;
    "SetMaxCommission(uint256)": EventFragment;
    "SetName(string)": EventFragment;
    "SetPendingAdmin(address)": EventFragment;
    "SetPoolPercentages(uint256[])": EventFragment;
    "SetSymbol(string)": EventFragment;
    "Stake(address,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VPoolSharesReceived(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommissionSharesSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommissionWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCommissionSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolActivation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositsPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxCommission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPendingAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolPercentages"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSymbol"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VPoolSharesReceived"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CommissionSharesSoldEventObject {
  pSharesSold: BigNumber;
  id: BigNumber;
  amountSold: BigNumber;
}
export type CommissionSharesSoldEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  CommissionSharesSoldEventObject
>;

export type CommissionSharesSoldEventFilter =
  TypedEventFilter<CommissionSharesSoldEvent>;

export interface CommissionWithdrawnEventObject {
  withdrawer: string;
  amountWithdrawn: BigNumber;
}
export type CommissionWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  CommissionWithdrawnEventObject
>;

export type CommissionWithdrawnEventFilter =
  TypedEventFilter<CommissionWithdrawnEvent>;

export interface InitializedEventObject {
  version: BigNumber;
  cdata: string;
}
export type InitializedEvent = TypedEvent<
  [BigNumber, string],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewCommissionSplitEventObject {
  recipients: string[];
  splits: BigNumber[];
}
export type NewCommissionSplitEvent = TypedEvent<
  [string[], BigNumber[]],
  NewCommissionSplitEventObject
>;

export type NewCommissionSplitEventFilter =
  TypedEventFilter<NewCommissionSplitEvent>;

export interface PoolActivationEventObject {
  poolAddress: string;
  id: BigNumber;
  isActive: boolean;
}
export type PoolActivationEvent = TypedEvent<
  [string, BigNumber, boolean],
  PoolActivationEventObject
>;

export type PoolActivationEventFilter = TypedEventFilter<PoolActivationEvent>;

export interface PoolAddedEventObject {
  poolAddress: string;
  id: BigNumber;
}
export type PoolAddedEvent = TypedEvent<
  [string, BigNumber],
  PoolAddedEventObject
>;

export type PoolAddedEventFilter = TypedEventFilter<PoolAddedEvent>;

export interface SetAdminEventObject {
  admin: string;
}
export type SetAdminEvent = TypedEvent<[string], SetAdminEventObject>;

export type SetAdminEventFilter = TypedEventFilter<SetAdminEvent>;

export interface SetDepositsPausedEventObject {
  isPaused: boolean;
}
export type SetDepositsPausedEvent = TypedEvent<
  [boolean],
  SetDepositsPausedEventObject
>;

export type SetDepositsPausedEventFilter =
  TypedEventFilter<SetDepositsPausedEvent>;

export interface SetFeeEventObject {
  poolId: BigNumber;
  operatorFeeBps: BigNumber;
}
export type SetFeeEvent = TypedEvent<[BigNumber, BigNumber], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetMaxCommissionEventObject {
  maxCommission: BigNumber;
}
export type SetMaxCommissionEvent = TypedEvent<
  [BigNumber],
  SetMaxCommissionEventObject
>;

export type SetMaxCommissionEventFilter =
  TypedEventFilter<SetMaxCommissionEvent>;

export interface SetNameEventObject {
  name: string;
}
export type SetNameEvent = TypedEvent<[string], SetNameEventObject>;

export type SetNameEventFilter = TypedEventFilter<SetNameEvent>;

export interface SetPendingAdminEventObject {
  pendingAdmin: string;
}
export type SetPendingAdminEvent = TypedEvent<
  [string],
  SetPendingAdminEventObject
>;

export type SetPendingAdminEventFilter = TypedEventFilter<SetPendingAdminEvent>;

export interface SetPoolPercentagesEventObject {
  split: BigNumber[];
}
export type SetPoolPercentagesEvent = TypedEvent<
  [BigNumber[]],
  SetPoolPercentagesEventObject
>;

export type SetPoolPercentagesEventFilter =
  TypedEventFilter<SetPoolPercentagesEvent>;

export interface SetSymbolEventObject {
  symbol: string;
}
export type SetSymbolEvent = TypedEvent<[string], SetSymbolEventObject>;

export type SetSymbolEventFilter = TypedEventFilter<SetSymbolEvent>;

export interface StakeEventObject {
  staker: string;
  ethValue: BigNumber;
  sharesBought: BigNumber;
  id: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VPoolSharesReceivedEventObject {
  vPool: string;
  poolId: BigNumber;
  amount: BigNumber;
}
export type VPoolSharesReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  VPoolSharesReceivedEventObject
>;

export type VPoolSharesReceivedEventFilter =
  TypedEventFilter<VPoolSharesReceivedEvent>;

export interface KilnLiquid20A extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KilnLiquid20AInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getPool(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    acceptAdmin(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addPool(
      pool: string,
      feeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfUnderlying(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeFee(
      poolId: BigNumberish,
      newFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeSplit(
      recipients: string[],
      splits: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    depositsPaused(overrides?: CallOverrides): Promise<[boolean]>;

    exitCommissionShares(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCurrentSplit(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getFee(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolActivation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      args: Native20ConfigurationStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    integratorCommissionOwed(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    multiClaim(
      exitQueues: string[],
      ticketIds: BigNumberish[][],
      casksIds: BigNumberish[][],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multiResolve(
      exitQueues: string[],
      ticketIds: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]] & { caskIdsOrErrors: BigNumber[][] }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onvPoolSharesReceived(
      operator: string,
      from: string,
      amount: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseDeposits(
      isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pools(overrides?: CallOverrides): Promise<[string[]]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestExit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMonoTicketThreshold(
      minTicketEthValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPoolActivation(
      poolId: BigNumberish,
      status: boolean,
      newPoolPercentages: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPoolPercentages(
      split: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnderlyingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawCommission(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  _getPool(poolId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  acceptAdmin(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addPool(
    pool: string,
    feeBps: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfUnderlying(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeFee(
    poolId: BigNumberish,
    newFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeSplit(
    recipients: string[],
    splits: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  depositsPaused(overrides?: CallOverrides): Promise<boolean>;

  exitCommissionShares(
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCurrentSplit(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  getFee(poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolActivation(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    args: Native20ConfigurationStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  integratorCommissionOwed(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multiClaim(
    exitQueues: string[],
    ticketIds: BigNumberish[][],
    casksIds: BigNumberish[][],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multiResolve(
    exitQueues: string[],
    ticketIds: BigNumberish[][],
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  name(overrides?: CallOverrides): Promise<string>;

  onvPoolSharesReceived(
    operator: string,
    from: string,
    amount: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseDeposits(
    isPaused: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pools(overrides?: CallOverrides): Promise<string[]>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  requestExit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMonoTicketThreshold(
    minTicketEthValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPoolActivation(
    poolId: BigNumberish,
    status: boolean,
    newPoolPercentages: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPoolPercentages(
    split: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnderlyingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawCommission(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    _getPool(poolId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    addPool(
      pool: string,
      feeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeFee(
      poolId: BigNumberish,
      newFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSplit(
      recipients: string[],
      splits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    depositsPaused(overrides?: CallOverrides): Promise<boolean>;

    exitCommissionShares(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentSplit(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getFee(poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolActivation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      args: Native20ConfigurationStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    integratorCommissionOwed(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiClaim(
      exitQueues: string[],
      ticketIds: BigNumberish[][],
      casksIds: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<number[][]>;

    multiResolve(
      exitQueues: string[],
      ticketIds: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    name(overrides?: CallOverrides): Promise<string>;

    onvPoolSharesReceived(
      operator: string,
      from: string,
      amount: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseDeposits(isPaused: boolean, overrides?: CallOverrides): Promise<void>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pools(overrides?: CallOverrides): Promise<string[]>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    requestExit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMonoTicketThreshold(
      minTicketEthValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolActivation(
      poolId: BigNumberish,
      status: boolean,
      newPoolPercentages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolPercentages(
      split: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    stake(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlyingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawCommission(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "CommissionSharesSold(uint256,uint256,uint256)"(
      pSharesSold?: null,
      id?: null,
      amountSold?: null
    ): CommissionSharesSoldEventFilter;
    CommissionSharesSold(
      pSharesSold?: null,
      id?: null,
      amountSold?: null
    ): CommissionSharesSoldEventFilter;

    "CommissionWithdrawn(address,uint256)"(
      withdrawer?: string | null,
      amountWithdrawn?: null
    ): CommissionWithdrawnEventFilter;
    CommissionWithdrawn(
      withdrawer?: string | null,
      amountWithdrawn?: null
    ): CommissionWithdrawnEventFilter;

    "Initialized(uint256,bytes)"(
      version?: null,
      cdata?: null
    ): InitializedEventFilter;
    Initialized(version?: null, cdata?: null): InitializedEventFilter;

    "NewCommissionSplit(address[],uint256[])"(
      recipients?: null,
      splits?: null
    ): NewCommissionSplitEventFilter;
    NewCommissionSplit(
      recipients?: null,
      splits?: null
    ): NewCommissionSplitEventFilter;

    "PoolActivation(address,uint256,bool)"(
      poolAddress?: null,
      id?: null,
      isActive?: null
    ): PoolActivationEventFilter;
    PoolActivation(
      poolAddress?: null,
      id?: null,
      isActive?: null
    ): PoolActivationEventFilter;

    "PoolAdded(address,uint256)"(
      poolAddress?: null,
      id?: null
    ): PoolAddedEventFilter;
    PoolAdded(poolAddress?: null, id?: null): PoolAddedEventFilter;

    "SetAdmin(address)"(admin?: null): SetAdminEventFilter;
    SetAdmin(admin?: null): SetAdminEventFilter;

    "SetDepositsPaused(bool)"(isPaused?: null): SetDepositsPausedEventFilter;
    SetDepositsPaused(isPaused?: null): SetDepositsPausedEventFilter;

    "SetFee(uint256,uint256)"(
      poolId?: null,
      operatorFeeBps?: null
    ): SetFeeEventFilter;
    SetFee(poolId?: null, operatorFeeBps?: null): SetFeeEventFilter;

    "SetMaxCommission(uint256)"(
      maxCommission?: null
    ): SetMaxCommissionEventFilter;
    SetMaxCommission(maxCommission?: null): SetMaxCommissionEventFilter;

    "SetName(string)"(name?: null): SetNameEventFilter;
    SetName(name?: null): SetNameEventFilter;

    "SetPendingAdmin(address)"(pendingAdmin?: null): SetPendingAdminEventFilter;
    SetPendingAdmin(pendingAdmin?: null): SetPendingAdminEventFilter;

    "SetPoolPercentages(uint256[])"(
      split?: null
    ): SetPoolPercentagesEventFilter;
    SetPoolPercentages(split?: null): SetPoolPercentagesEventFilter;

    "SetSymbol(string)"(symbol?: null): SetSymbolEventFilter;
    SetSymbol(symbol?: null): SetSymbolEventFilter;

    "Stake(address,uint256,uint256,uint256)"(
      staker?: string | null,
      ethValue?: null,
      sharesBought?: null,
      id?: null
    ): StakeEventFilter;
    Stake(
      staker?: string | null,
      ethValue?: null,
      sharesBought?: null,
      id?: null
    ): StakeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "VPoolSharesReceived(address,uint256,uint256)"(
      vPool?: null,
      poolId?: null,
      amount?: null
    ): VPoolSharesReceivedEventFilter;
    VPoolSharesReceived(
      vPool?: null,
      poolId?: null,
      amount?: null
    ): VPoolSharesReceivedEventFilter;
  };

  estimateGas: {
    _getPool(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptAdmin(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    addPool(
      pool: string,
      feeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeFee(
      poolId: BigNumberish,
      newFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeSplit(
      recipients: string[],
      splits: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    depositsPaused(overrides?: CallOverrides): Promise<BigNumber>;

    exitCommissionShares(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCurrentSplit(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolActivation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      args: Native20ConfigurationStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    integratorCommissionOwed(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiClaim(
      exitQueues: string[],
      ticketIds: BigNumberish[][],
      casksIds: BigNumberish[][],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multiResolve(
      exitQueues: string[],
      ticketIds: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onvPoolSharesReceived(
      operator: string,
      from: string,
      amount: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseDeposits(
      isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pools(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    requestExit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMonoTicketThreshold(
      minTicketEthValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPoolActivation(
      poolId: BigNumberish,
      status: boolean,
      newPoolPercentages: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPoolPercentages(
      split: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(overrides?: PayableOverrides & { from?: string }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlyingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawCommission(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getPool(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptAdmin(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addPool(
      pool: string,
      feeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeFee(
      poolId: BigNumberish,
      newFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeSplit(
      recipients: string[],
      splits: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exitCommissionShares(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCurrentSplit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolActivation(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      args: Native20ConfigurationStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    integratorCommissionOwed(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiClaim(
      exitQueues: string[],
      ticketIds: BigNumberish[][],
      casksIds: BigNumberish[][],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multiResolve(
      exitQueues: string[],
      ticketIds: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onvPoolSharesReceived(
      operator: string,
      from: string,
      amount: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseDeposits(
      isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestExit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMonoTicketThreshold(
      minTicketEthValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPoolActivation(
      poolId: BigNumberish,
      status: boolean,
      newPoolPercentages: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPoolPercentages(
      split: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnderlyingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawCommission(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
