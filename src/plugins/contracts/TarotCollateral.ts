/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TarotCollateralInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "LIQUIDATION_FEE_MAX()": FunctionFragment;
    "LIQUIDATION_INCENTIVE_MAX()": FunctionFragment;
    "LIQUIDATION_INCENTIVE_MIN()": FunctionFragment;
    "MINIMUM_LIQUIDITY()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "SAFETY_MARGIN_SQRT_MAX()": FunctionFragment;
    "SAFETY_MARGIN_SQRT_MIN()": FunctionFragment;
    "_initialize(string,string,address,address,address)": FunctionFragment;
    "_setFactory()": FunctionFragment;
    "_setLiquidationFee(uint256)": FunctionFragment;
    "_setLiquidationIncentive(uint256)": FunctionFragment;
    "_setSafetyMarginSqrt(uint256)": FunctionFragment;
    "accountLiquidity(address)": FunctionFragment;
    "accountLiquidityAmounts(address,uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrowable0()": FunctionFragment;
    "borrowable1()": FunctionFragment;
    "canBorrow(address,address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "factory()": FunctionFragment;
    "flashRedeem(address,uint256,bytes)": FunctionFragment;
    "getPrices()": FunctionFragment;
    "liquidationFee()": FunctionFragment;
    "liquidationIncentive()": FunctionFragment;
    "liquidationPenalty()": FunctionFragment;
    "mint(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "safetyMarginSqrt()": FunctionFragment;
    "seize(address,address,uint256)": FunctionFragment;
    "skim(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "sync()": FunctionFragment;
    "tarotPriceOracle()": FunctionFragment;
    "tokensUnlocked(address,uint256)": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "LIQUIDATION_FEE_MAX"
      | "LIQUIDATION_INCENTIVE_MAX"
      | "LIQUIDATION_INCENTIVE_MIN"
      | "MINIMUM_LIQUIDITY"
      | "PERMIT_TYPEHASH"
      | "SAFETY_MARGIN_SQRT_MAX"
      | "SAFETY_MARGIN_SQRT_MIN"
      | "_initialize"
      | "_setFactory"
      | "_setLiquidationFee"
      | "_setLiquidationIncentive"
      | "_setSafetyMarginSqrt"
      | "accountLiquidity"
      | "accountLiquidityAmounts"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "borrowable0"
      | "borrowable1"
      | "canBorrow"
      | "decimals"
      | "exchangeRate"
      | "factory"
      | "flashRedeem"
      | "getPrices"
      | "liquidationFee"
      | "liquidationIncentive"
      | "liquidationPenalty"
      | "mint"
      | "name"
      | "nonces"
      | "permit"
      | "redeem"
      | "safetyMarginSqrt"
      | "seize"
      | "skim"
      | "symbol"
      | "sync"
      | "tarotPriceOracle"
      | "tokensUnlocked"
      | "totalBalance"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "underlying"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_FEE_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_INCENTIVE_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_INCENTIVE_MIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAFETY_MARGIN_SQRT_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAFETY_MARGIN_SQRT_MIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setLiquidationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setLiquidationIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setSafetyMarginSqrt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accountLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accountLiquidityAmounts",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowable0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowable1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canBorrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashRedeem",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getPrices", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPenalty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safetyMarginSqrt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "skim", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tarotPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensUnlocked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_FEE_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_INCENTIVE_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_INCENTIVE_MIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAFETY_MARGIN_SQRT_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAFETY_MARGIN_SQRT_MIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setSafetyMarginSqrt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountLiquidityAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowable0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowable1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canBorrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safetyMarginSqrt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tarotPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Mint(address,address,uint256,uint256)": EventFragment;
    "NewLiquidationFee(uint256)": EventFragment;
    "NewLiquidationIncentive(uint256)": EventFragment;
    "NewSafetyMargin(uint256)": EventFragment;
    "Redeem(address,address,uint256,uint256)": EventFragment;
    "Sync(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidationFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidationIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSafetyMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface MintEventObject {
  sender: string;
  minter: string;
  mintAmount: BigNumber;
  mintTokens: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface NewLiquidationFeeEventObject {
  newLiquidationFee: BigNumber;
}
export type NewLiquidationFeeEvent = TypedEvent<
  [BigNumber],
  NewLiquidationFeeEventObject
>;

export type NewLiquidationFeeEventFilter =
  TypedEventFilter<NewLiquidationFeeEvent>;

export interface NewLiquidationIncentiveEventObject {
  newLiquidationIncentive: BigNumber;
}
export type NewLiquidationIncentiveEvent = TypedEvent<
  [BigNumber],
  NewLiquidationIncentiveEventObject
>;

export type NewLiquidationIncentiveEventFilter =
  TypedEventFilter<NewLiquidationIncentiveEvent>;

export interface NewSafetyMarginEventObject {
  newSafetyMarginSqrt: BigNumber;
}
export type NewSafetyMarginEvent = TypedEvent<
  [BigNumber],
  NewSafetyMarginEventObject
>;

export type NewSafetyMarginEventFilter = TypedEventFilter<NewSafetyMarginEvent>;

export interface RedeemEventObject {
  sender: string;
  redeemer: string;
  redeemAmount: BigNumber;
  redeemTokens: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface SyncEventObject {
  totalBalance: BigNumber;
}
export type SyncEvent = TypedEvent<[BigNumber], SyncEventObject>;

export type SyncEventFilter = TypedEventFilter<SyncEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TarotCollateral extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TarotCollateralInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATION_FEE_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATION_INCENTIVE_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATION_INCENTIVE_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    SAFETY_MARGIN_SQRT_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    SAFETY_MARGIN_SQRT_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    _initialize(
      _name: string,
      _symbol: string,
      _underlying: string,
      _borrowable0: string,
      _borrowable1: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setFactory(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setLiquidationFee(
      newLiquidationFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentive: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setSafetyMarginSqrt(
      newSafetyMarginSqrt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    accountLiquidity(
      borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    accountLiquidityAmounts(
      borrower: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowable0(overrides?: CallOverrides): Promise<[string]>;

    borrowable1(overrides?: CallOverrides): Promise<[string]>;

    canBorrow(
      borrower: string,
      borrowable: string,
      accountBorrows: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    exchangeRate(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    flashRedeem(
      redeemer: string,
      redeemAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPrices(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationIncentive(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationPenalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      minter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeem(
      redeemer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safetyMarginSqrt(overrides?: CallOverrides): Promise<[BigNumber]>;

    seize(
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    skim(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tarotPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    tokensUnlocked(
      from: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  LIQUIDATION_FEE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATION_INCENTIVE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATION_INCENTIVE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  SAFETY_MARGIN_SQRT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  SAFETY_MARGIN_SQRT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  _initialize(
    _name: string,
    _symbol: string,
    _underlying: string,
    _borrowable0: string,
    _borrowable1: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setFactory(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setLiquidationFee(
    newLiquidationFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentive: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setSafetyMarginSqrt(
    newSafetyMarginSqrt: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  accountLiquidity(
    borrower: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  accountLiquidityAmounts(
    borrower: string,
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowable0(overrides?: CallOverrides): Promise<string>;

  borrowable1(overrides?: CallOverrides): Promise<string>;

  canBorrow(
    borrower: string,
    borrowable: string,
    accountBorrows: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  exchangeRate(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  flashRedeem(
    redeemer: string,
    redeemAmount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPrices(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    minter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeem(
    redeemer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safetyMarginSqrt(overrides?: CallOverrides): Promise<BigNumber>;

  seize(
    liquidator: string,
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  skim(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  sync(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  tarotPriceOracle(overrides?: CallOverrides): Promise<string>;

  tokensUnlocked(
    from: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    LIQUIDATION_FEE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_INCENTIVE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_INCENTIVE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    SAFETY_MARGIN_SQRT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    SAFETY_MARGIN_SQRT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    _initialize(
      _name: string,
      _symbol: string,
      _underlying: string,
      _borrowable0: string,
      _borrowable1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _setFactory(overrides?: CallOverrides): Promise<void>;

    _setLiquidationFee(
      newLiquidationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setLiquidationIncentive(
      newLiquidationIncentive: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setSafetyMarginSqrt(
      newSafetyMarginSqrt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    accountLiquidity(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { liquidity: BigNumber; shortfall: BigNumber }
    >;

    accountLiquidityAmounts(
      borrower: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { liquidity: BigNumber; shortfall: BigNumber }
    >;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowable0(overrides?: CallOverrides): Promise<string>;

    borrowable1(overrides?: CallOverrides): Promise<string>;

    canBorrow(
      borrower: string,
      borrowable: string,
      accountBorrows: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    flashRedeem(
      redeemer: string,
      redeemAmount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getPrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price0: BigNumber; price1: BigNumber }
    >;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    mint(minter: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(redeemer: string, overrides?: CallOverrides): Promise<BigNumber>;

    safetyMarginSqrt(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    skim(to: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    tarotPriceOracle(overrides?: CallOverrides): Promise<string>;

    tokensUnlocked(
      from: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Mint(address,address,uint256,uint256)"(
      sender?: string | null,
      minter?: string | null,
      mintAmount?: null,
      mintTokens?: null
    ): MintEventFilter;
    Mint(
      sender?: string | null,
      minter?: string | null,
      mintAmount?: null,
      mintTokens?: null
    ): MintEventFilter;

    "NewLiquidationFee(uint256)"(
      newLiquidationFee?: null
    ): NewLiquidationFeeEventFilter;
    NewLiquidationFee(newLiquidationFee?: null): NewLiquidationFeeEventFilter;

    "NewLiquidationIncentive(uint256)"(
      newLiquidationIncentive?: null
    ): NewLiquidationIncentiveEventFilter;
    NewLiquidationIncentive(
      newLiquidationIncentive?: null
    ): NewLiquidationIncentiveEventFilter;

    "NewSafetyMargin(uint256)"(
      newSafetyMarginSqrt?: null
    ): NewSafetyMarginEventFilter;
    NewSafetyMargin(newSafetyMarginSqrt?: null): NewSafetyMarginEventFilter;

    "Redeem(address,address,uint256,uint256)"(
      sender?: string | null,
      redeemer?: string | null,
      redeemAmount?: null,
      redeemTokens?: null
    ): RedeemEventFilter;
    Redeem(
      sender?: string | null,
      redeemer?: string | null,
      redeemAmount?: null,
      redeemTokens?: null
    ): RedeemEventFilter;

    "Sync(uint256)"(totalBalance?: null): SyncEventFilter;
    Sync(totalBalance?: null): SyncEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_FEE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_INCENTIVE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_INCENTIVE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    SAFETY_MARGIN_SQRT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    SAFETY_MARGIN_SQRT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    _initialize(
      _name: string,
      _symbol: string,
      _underlying: string,
      _borrowable0: string,
      _borrowable1: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setFactory(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    _setLiquidationFee(
      newLiquidationFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentive: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setSafetyMarginSqrt(
      newSafetyMarginSqrt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    accountLiquidity(
      borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    accountLiquidityAmounts(
      borrower: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowable0(overrides?: CallOverrides): Promise<BigNumber>;

    borrowable1(overrides?: CallOverrides): Promise<BigNumber>;

    canBorrow(
      borrower: string,
      borrowable: string,
      accountBorrows: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    flashRedeem(
      redeemer: string,
      redeemAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPrices(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    liquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      minter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeem(
      redeemer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safetyMarginSqrt(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    skim(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    sync(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    tarotPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    tokensUnlocked(
      from: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATION_FEE_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDATION_INCENTIVE_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDATION_INCENTIVE_MIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SAFETY_MARGIN_SQRT_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SAFETY_MARGIN_SQRT_MIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _initialize(
      _name: string,
      _symbol: string,
      _underlying: string,
      _borrowable0: string,
      _borrowable1: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setFactory(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setLiquidationFee(
      newLiquidationFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentive: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setSafetyMarginSqrt(
      newSafetyMarginSqrt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    accountLiquidity(
      borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    accountLiquidityAmounts(
      borrower: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowable0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowable1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canBorrow(
      borrower: string,
      borrowable: string,
      accountBorrows: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashRedeem(
      redeemer: string,
      redeemAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPrices(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationIncentive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationPenalty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      minter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeem(
      redeemer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safetyMarginSqrt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seize(
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    skim(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tarotPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensUnlocked(
      from: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
