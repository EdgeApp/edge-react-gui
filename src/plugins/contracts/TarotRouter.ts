/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TarotRouterInterface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "_optimalLiquidity(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "bDeployer()": FunctionFragment;
    "borrow(address,uint256,address,uint256,bytes)": FunctionFragment;
    "borrowETH(address,uint256,address,uint256,bytes)": FunctionFragment;
    "cDeployer()": FunctionFragment;
    "deleverage(address,uint256,uint256,uint256,uint256,bytes)": FunctionFragment;
    "factory()": FunctionFragment;
    "getBorrowable(address,uint8)": FunctionFragment;
    "getCollateral(address)": FunctionFragment;
    "getLendingPool(address)": FunctionFragment;
    "getUniswapV2Pair(address)": FunctionFragment;
    "isVaultToken(address)": FunctionFragment;
    "leverage(address,uint256,uint256,uint256,uint256,address,uint256,bytes,bytes)": FunctionFragment;
    "liquidate(address,uint256,address,address,uint256)": FunctionFragment;
    "liquidateETH(address,address,address,uint256)": FunctionFragment;
    "mint(address,uint256,address,uint256)": FunctionFragment;
    "mintCollateral(address,uint256,address,uint256,bytes)": FunctionFragment;
    "mintETH(address,address,uint256)": FunctionFragment;
    "redeem(address,uint256,address,uint256,bytes)": FunctionFragment;
    "redeemETH(address,uint256,address,uint256,bytes)": FunctionFragment;
    "repay(address,uint256,address,uint256)": FunctionFragment;
    "repayETH(address,address,uint256)": FunctionFragment;
    "tarotBorrow(address,address,uint256,bytes)": FunctionFragment;
    "tarotRedeem(address,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH"
      | "_optimalLiquidity"
      | "bDeployer"
      | "borrow"
      | "borrowETH"
      | "cDeployer"
      | "deleverage"
      | "factory"
      | "getBorrowable"
      | "getCollateral"
      | "getLendingPool"
      | "getUniswapV2Pair"
      | "isVaultToken"
      | "leverage"
      | "liquidate"
      | "liquidateETH"
      | "mint"
      | "mintCollateral"
      | "mintETH"
      | "redeem"
      | "redeemETH"
      | "repay"
      | "repayETH"
      | "tarotBorrow"
      | "tarotRedeem"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_optimalLiquidity",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bDeployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowETH",
    values: [string, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "cDeployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleverage",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBorrowable",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV2Pair",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "leverage",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateETH",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCollateral",
    values: [string, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintETH",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemETH",
    values: [string, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayETH",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tarotBorrow",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tarotRedeem",
    values: [string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_optimalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bDeployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cDeployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tarotBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tarotRedeem",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TarotRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TarotRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    _optimalLiquidity(
      uniswapV2Pair: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    bDeployer(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      borrowable: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowETH(
      borrowable: string,
      amountETH: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cDeployer(overrides?: CallOverrides): Promise<[string]>;

    deleverage(
      underlying: string,
      redeemTokens: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getBorrowable(
      underlying: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { borrowable: string }>;

    getCollateral(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[string] & { collateral: string }>;

    getLendingPool(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        collateral: string;
        borrowableA: string;
        borrowableB: string;
      }
    >;

    getUniswapV2Pair(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isVaultToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leverage(
      underlying: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitDataA: BytesLike,
      permitDataB: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidate(
      borrowable: string,
      amountMax: BigNumberish,
      borrower: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidateETH(
      borrowable: string,
      borrower: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mint(
      poolToken: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintCollateral(
      poolToken: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintETH(
      poolToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeem(
      poolToken: string,
      tokens: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeemETH(
      poolToken: string,
      tokens: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repay(
      borrowable: string,
      amountMax: BigNumberish,
      borrower: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayETH(
      borrowable: string,
      borrower: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    tarotBorrow(
      sender: string,
      borrower: string,
      borrowAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tarotRedeem(
      sender: string,
      redeemAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  _optimalLiquidity(
    uniswapV2Pair: string,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
  >;

  bDeployer(overrides?: CallOverrides): Promise<string>;

  borrow(
    borrowable: string,
    amount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    permitData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowETH(
    borrowable: string,
    amountETH: BigNumberish,
    to: string,
    deadline: BigNumberish,
    permitData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cDeployer(overrides?: CallOverrides): Promise<string>;

  deleverage(
    underlying: string,
    redeemTokens: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    deadline: BigNumberish,
    permitData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getBorrowable(
    underlying: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCollateral(underlying: string, overrides?: CallOverrides): Promise<string>;

  getLendingPool(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      collateral: string;
      borrowableA: string;
      borrowableB: string;
    }
  >;

  getUniswapV2Pair(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isVaultToken(underlying: string, overrides?: CallOverrides): Promise<boolean>;

  leverage(
    underlying: string,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    permitDataA: BytesLike,
    permitDataB: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidate(
    borrowable: string,
    amountMax: BigNumberish,
    borrower: string,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidateETH(
    borrowable: string,
    borrower: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mint(
    poolToken: string,
    amount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintCollateral(
    poolToken: string,
    amount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    permitData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintETH(
    poolToken: string,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeem(
    poolToken: string,
    tokens: BigNumberish,
    to: string,
    deadline: BigNumberish,
    permitData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeemETH(
    poolToken: string,
    tokens: BigNumberish,
    to: string,
    deadline: BigNumberish,
    permitData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repay(
    borrowable: string,
    amountMax: BigNumberish,
    borrower: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayETH(
    borrowable: string,
    borrower: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  tarotBorrow(
    sender: string,
    borrower: string,
    borrowAmount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tarotRedeem(
    sender: string,
    redeemAmount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    _optimalLiquidity(
      uniswapV2Pair: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    bDeployer(overrides?: CallOverrides): Promise<string>;

    borrow(
      borrowable: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowETH(
      borrowable: string,
      amountETH: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cDeployer(overrides?: CallOverrides): Promise<string>;

    deleverage(
      underlying: string,
      redeemTokens: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getBorrowable(
      underlying: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCollateral(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getLendingPool(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        collateral: string;
        borrowableA: string;
        borrowableB: string;
      }
    >;

    getUniswapV2Pair(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isVaultToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    leverage(
      underlying: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitDataA: BytesLike,
      permitDataB: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      borrowable: string,
      amountMax: BigNumberish,
      borrower: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; seizeTokens: BigNumber }
    >;

    liquidateETH(
      borrowable: string,
      borrower: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountETH: BigNumber; seizeTokens: BigNumber }
    >;

    mint(
      poolToken: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintCollateral(
      poolToken: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintETH(
      poolToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      poolToken: string,
      tokens: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemETH(
      poolToken: string,
      tokens: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repay(
      borrowable: string,
      amountMax: BigNumberish,
      borrower: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayETH(
      borrowable: string,
      borrower: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tarotBorrow(
      sender: string,
      borrower: string,
      borrowAmount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tarotRedeem(
      sender: string,
      redeemAmount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    _optimalLiquidity(
      uniswapV2Pair: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      borrowable: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowETH(
      borrowable: string,
      amountETH: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    deleverage(
      underlying: string,
      redeemTokens: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowable(
      underlying: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateral(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLendingPool(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapV2Pair(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVaultToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverage(
      underlying: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitDataA: BytesLike,
      permitDataB: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidate(
      borrowable: string,
      amountMax: BigNumberish,
      borrower: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidateETH(
      borrowable: string,
      borrower: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mint(
      poolToken: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintCollateral(
      poolToken: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mintETH(
      poolToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    redeem(
      poolToken: string,
      tokens: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeemETH(
      poolToken: string,
      tokens: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repay(
      borrowable: string,
      amountMax: BigNumberish,
      borrower: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repayETH(
      borrowable: string,
      borrower: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    tarotBorrow(
      sender: string,
      borrower: string,
      borrowAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tarotRedeem(
      sender: string,
      redeemAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _optimalLiquidity(
      uniswapV2Pair: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      borrowable: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowETH(
      borrowable: string,
      amountETH: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleverage(
      underlying: string,
      redeemTokens: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowable(
      underlying: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateral(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLendingPool(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapV2Pair(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVaultToken(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverage(
      underlying: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitDataA: BytesLike,
      permitDataB: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidate(
      borrowable: string,
      amountMax: BigNumberish,
      borrower: string,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidateETH(
      borrowable: string,
      borrower: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mint(
      poolToken: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintCollateral(
      poolToken: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintETH(
      poolToken: string,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeem(
      poolToken: string,
      tokens: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeemETH(
      poolToken: string,
      tokens: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repay(
      borrowable: string,
      amountMax: BigNumberish,
      borrower: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayETH(
      borrowable: string,
      borrower: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tarotBorrow(
      sender: string,
      borrower: string,
      borrowAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tarotRedeem(
      sender: string,
      redeemAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
