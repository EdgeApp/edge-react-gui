/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface GlifSimpleRampInterface extends utils.Interface {
  functions: {
    "burnIFIL()": FunctionFragment;
    "distribute(address,uint256)": FunctionFragment;
    "iFIL()": FunctionFragment;
    "maxRedeem(address)": FunctionFragment;
    "maxWithdraw(address)": FunctionFragment;
    "pool()": FunctionFragment;
    "previewRedeem(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "recoverFIL()": FunctionFragment;
    "redeem(uint256,address,address,uint256)": FunctionFragment;
    "redeemF(uint256,address,address,uint256)": FunctionFragment;
    "refreshExtern()": FunctionFragment;
    "totalExitDemand()": FunctionFragment;
    "wFIL()": FunctionFragment;
    "withdraw(uint256,address,address,uint256)": FunctionFragment;
    "withdrawF(uint256,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burnIFIL"
      | "distribute"
      | "iFIL"
      | "maxRedeem"
      | "maxWithdraw"
      | "pool"
      | "previewRedeem"
      | "previewWithdraw"
      | "recoverFIL"
      | "redeem"
      | "redeemF"
      | "refreshExtern"
      | "totalExitDemand"
      | "wFIL"
      | "withdraw"
      | "withdrawF"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "burnIFIL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "iFIL", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxRedeem", values: [string]): string;
  encodeFunctionData(functionFragment: "maxWithdraw", values: [string]): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFIL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemF",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshExtern",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalExitDemand",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wFIL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawF",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "burnIFIL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iFIL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverFIL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshExtern",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalExitDemand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wFIL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawF", data: BytesLike): Result;

  events: {
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface GlifSimpleRamp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlifSimpleRampInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnIFIL(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distribute(
      arg0: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    iFIL(overrides?: CallOverrides): Promise<[string]>;

    maxRedeem(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    maxWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    recoverFIL(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeemF(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    refreshExtern(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalExitDemand(overrides?: CallOverrides): Promise<[BigNumber]>;

    wFIL(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawF(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  burnIFIL(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distribute(
    arg0: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  iFIL(overrides?: CallOverrides): Promise<string>;

  maxRedeem(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  previewRedeem(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recoverFIL(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeem(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeemF(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  refreshExtern(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalExitDemand(overrides?: CallOverrides): Promise<BigNumber>;

  wFIL(overrides?: CallOverrides): Promise<string>;

  withdraw(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawF(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnIFIL(overrides?: CallOverrides): Promise<void>;

    distribute(
      arg0: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    iFIL(overrides?: CallOverrides): Promise<string>;

    maxRedeem(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverFIL(overrides?: CallOverrides): Promise<void>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemF(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refreshExtern(overrides?: CallOverrides): Promise<void>;

    totalExitDemand(overrides?: CallOverrides): Promise<BigNumber>;

    wFIL(overrides?: CallOverrides): Promise<string>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawF(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Withdraw(address,address,address,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    burnIFIL(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    distribute(
      arg0: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    iFIL(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverFIL(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeemF(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    refreshExtern(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalExitDemand(overrides?: CallOverrides): Promise<BigNumber>;

    wFIL(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawF(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnIFIL(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distribute(
      arg0: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    iFIL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverFIL(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeemF(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    refreshExtern(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalExitDemand(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wFIL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawF(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
