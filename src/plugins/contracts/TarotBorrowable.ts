/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TarotBorrowableInterface extends utils.Interface {
  functions: {
    "ADJUST_SPEED_MAX()": FunctionFragment;
    "ADJUST_SPEED_MIN()": FunctionFragment;
    "BORROW_FEE()": FunctionFragment;
    "BORROW_PERMIT_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "KINK_BORROW_RATE_MAX()": FunctionFragment;
    "KINK_BORROW_RATE_MIN()": FunctionFragment;
    "KINK_MULTIPLIER()": FunctionFragment;
    "KINK_UR_MAX()": FunctionFragment;
    "KINK_UR_MIN()": FunctionFragment;
    "MINIMUM_LIQUIDITY()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "RESERVE_FACTOR_MAX()": FunctionFragment;
    "_initialize(string,string,address,address)": FunctionFragment;
    "_setAdjustSpeed(uint256)": FunctionFragment;
    "_setBorrowTracker(address)": FunctionFragment;
    "_setFactory()": FunctionFragment;
    "_setKinkUtilizationRate(uint256)": FunctionFragment;
    "_setReserveFactor(uint256)": FunctionFragment;
    "accrualTimestamp()": FunctionFragment;
    "accrueInterest()": FunctionFragment;
    "adjustSpeed()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(address,address,uint256,bytes)": FunctionFragment;
    "borrowAllowance(address,address)": FunctionFragment;
    "borrowApprove(address,uint256)": FunctionFragment;
    "borrowBalance(address)": FunctionFragment;
    "borrowIndex()": FunctionFragment;
    "borrowPermit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "borrowRate()": FunctionFragment;
    "borrowTracker()": FunctionFragment;
    "collateral()": FunctionFragment;
    "decimals()": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "exchangeRateLast()": FunctionFragment;
    "factory()": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "kinkBorrowRate()": FunctionFragment;
    "kinkUtilizationRate()": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "mint(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "rateUpdateTimestamp()": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "reserveFactor()": FunctionFragment;
    "skim(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "sync()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalBorrows()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "trackBorrow(address)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADJUST_SPEED_MAX"
      | "ADJUST_SPEED_MIN"
      | "BORROW_FEE"
      | "BORROW_PERMIT_TYPEHASH"
      | "DOMAIN_SEPARATOR"
      | "KINK_BORROW_RATE_MAX"
      | "KINK_BORROW_RATE_MIN"
      | "KINK_MULTIPLIER"
      | "KINK_UR_MAX"
      | "KINK_UR_MIN"
      | "MINIMUM_LIQUIDITY"
      | "PERMIT_TYPEHASH"
      | "RESERVE_FACTOR_MAX"
      | "_initialize"
      | "_setAdjustSpeed"
      | "_setBorrowTracker"
      | "_setFactory"
      | "_setKinkUtilizationRate"
      | "_setReserveFactor"
      | "accrualTimestamp"
      | "accrueInterest"
      | "adjustSpeed"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "borrow"
      | "borrowAllowance"
      | "borrowApprove"
      | "borrowBalance"
      | "borrowIndex"
      | "borrowPermit"
      | "borrowRate"
      | "borrowTracker"
      | "collateral"
      | "decimals"
      | "exchangeRate"
      | "exchangeRateLast"
      | "factory"
      | "getBlockTimestamp"
      | "kinkBorrowRate"
      | "kinkUtilizationRate"
      | "liquidate"
      | "mint"
      | "name"
      | "nonces"
      | "permit"
      | "rateUpdateTimestamp"
      | "redeem"
      | "reserveFactor"
      | "skim"
      | "symbol"
      | "sync"
      | "totalBalance"
      | "totalBorrows"
      | "totalSupply"
      | "trackBorrow"
      | "transfer"
      | "transferFrom"
      | "underlying"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADJUST_SPEED_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADJUST_SPEED_MIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BORROW_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BORROW_PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KINK_BORROW_RATE_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KINK_BORROW_RATE_MIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KINK_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KINK_UR_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KINK_UR_MIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVE_FACTOR_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setAdjustSpeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setBorrowTracker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setKinkUtilizationRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accrualTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustSpeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAllowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowApprove",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowPermit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateLast",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kinkBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kinkUtilizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rateUpdateTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reserveFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "skim", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "trackBorrow", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ADJUST_SPEED_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADJUST_SPEED_MIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BORROW_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BORROW_PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KINK_BORROW_RATE_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KINK_BORROW_RATE_MIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KINK_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KINK_UR_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KINK_UR_MIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVE_FACTOR_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setAdjustSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setBorrowTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setKinkUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrualTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kinkBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kinkUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateUpdateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trackBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;

  events: {
    "AccrueInterest(uint256,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Borrow(address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "BorrowApproval(address,address,uint256)": EventFragment;
    "CalculateBorrowRate(uint256)": EventFragment;
    "CalculateKink(uint256)": EventFragment;
    "CalculateKinkBorrowRate(uint256)": EventFragment;
    "Liquidate(address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Mint(address,address,uint256,uint256)": EventFragment;
    "NewAdjustSpeed(uint256)": EventFragment;
    "NewBorrowTracker(address)": EventFragment;
    "NewKinkUtilizationRate(uint256)": EventFragment;
    "NewReserveFactor(uint256)": EventFragment;
    "Redeem(address,address,uint256,uint256)": EventFragment;
    "Sync(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CalculateBorrowRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CalculateKink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CalculateKinkBorrowRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdjustSpeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBorrowTracker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewKinkUtilizationRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReserveFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AccrueInterestEventObject {
  interestAccumulated: BigNumber;
  borrowIndex: BigNumber;
  totalBorrows: BigNumber;
}
export type AccrueInterestEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AccrueInterestEventObject
>;

export type AccrueInterestEventFilter = TypedEventFilter<AccrueInterestEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BorrowEventObject {
  sender: string;
  borrower: string;
  receiver: string;
  borrowAmount: BigNumber;
  repayAmount: BigNumber;
  accountBorrowsPrior: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface BorrowApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type BorrowApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  BorrowApprovalEventObject
>;

export type BorrowApprovalEventFilter = TypedEventFilter<BorrowApprovalEvent>;

export interface CalculateBorrowRateEventObject {
  borrowRate: BigNumber;
}
export type CalculateBorrowRateEvent = TypedEvent<
  [BigNumber],
  CalculateBorrowRateEventObject
>;

export type CalculateBorrowRateEventFilter =
  TypedEventFilter<CalculateBorrowRateEvent>;

export interface CalculateKinkEventObject {
  kinkRate: BigNumber;
}
export type CalculateKinkEvent = TypedEvent<
  [BigNumber],
  CalculateKinkEventObject
>;

export type CalculateKinkEventFilter = TypedEventFilter<CalculateKinkEvent>;

export interface CalculateKinkBorrowRateEventObject {
  kinkBorrowRate: BigNumber;
}
export type CalculateKinkBorrowRateEvent = TypedEvent<
  [BigNumber],
  CalculateKinkBorrowRateEventObject
>;

export type CalculateKinkBorrowRateEventFilter =
  TypedEventFilter<CalculateKinkBorrowRateEvent>;

export interface LiquidateEventObject {
  sender: string;
  borrower: string;
  liquidator: string;
  seizeTokens: BigNumber;
  repayAmount: BigNumber;
  accountBorrowsPrior: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type LiquidateEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface MintEventObject {
  sender: string;
  minter: string;
  mintAmount: BigNumber;
  mintTokens: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface NewAdjustSpeedEventObject {
  newAdjustSpeed: BigNumber;
}
export type NewAdjustSpeedEvent = TypedEvent<
  [BigNumber],
  NewAdjustSpeedEventObject
>;

export type NewAdjustSpeedEventFilter = TypedEventFilter<NewAdjustSpeedEvent>;

export interface NewBorrowTrackerEventObject {
  newBorrowTracker: string;
}
export type NewBorrowTrackerEvent = TypedEvent<
  [string],
  NewBorrowTrackerEventObject
>;

export type NewBorrowTrackerEventFilter =
  TypedEventFilter<NewBorrowTrackerEvent>;

export interface NewKinkUtilizationRateEventObject {
  newKinkUtilizationRate: BigNumber;
}
export type NewKinkUtilizationRateEvent = TypedEvent<
  [BigNumber],
  NewKinkUtilizationRateEventObject
>;

export type NewKinkUtilizationRateEventFilter =
  TypedEventFilter<NewKinkUtilizationRateEvent>;

export interface NewReserveFactorEventObject {
  newReserveFactor: BigNumber;
}
export type NewReserveFactorEvent = TypedEvent<
  [BigNumber],
  NewReserveFactorEventObject
>;

export type NewReserveFactorEventFilter =
  TypedEventFilter<NewReserveFactorEvent>;

export interface RedeemEventObject {
  sender: string;
  redeemer: string;
  redeemAmount: BigNumber;
  redeemTokens: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface SyncEventObject {
  totalBalance: BigNumber;
}
export type SyncEvent = TypedEvent<[BigNumber], SyncEventObject>;

export type SyncEventFilter = TypedEventFilter<SyncEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TarotBorrowable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TarotBorrowableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADJUST_SPEED_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    ADJUST_SPEED_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    BORROW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    BORROW_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    KINK_BORROW_RATE_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    KINK_BORROW_RATE_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    KINK_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    KINK_UR_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    KINK_UR_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    RESERVE_FACTOR_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    _initialize(
      _name: string,
      _symbol: string,
      _underlying: string,
      _collateral: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setAdjustSpeed(
      newAdjustSpeed: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setBorrowTracker(
      newBorrowTracker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setFactory(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setKinkUtilizationRate(
      newKinkUtilizationRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setReserveFactor(
      newReserveFactor: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    accrualTimestamp(overrides?: CallOverrides): Promise<[number]>;

    accrueInterest(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adjustSpeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      borrower: string,
      receiver: string,
      borrowAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowAllowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowApprove(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowBalance(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowPermit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowRate(overrides?: CallOverrides): Promise<[number]>;

    borrowTracker(overrides?: CallOverrides): Promise<[string]>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    exchangeRate(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exchangeRateLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[number]>;

    kinkBorrowRate(overrides?: CallOverrides): Promise<[number]>;

    kinkUtilizationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      borrower: string,
      liquidator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mint(
      minter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rateUpdateTimestamp(overrides?: CallOverrides): Promise<[number]>;

    redeem(
      redeemer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    skim(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    trackBorrow(
      borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;
  };

  ADJUST_SPEED_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  ADJUST_SPEED_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  BORROW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  BORROW_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  KINK_BORROW_RATE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  KINK_BORROW_RATE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  KINK_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  KINK_UR_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  KINK_UR_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  RESERVE_FACTOR_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  _initialize(
    _name: string,
    _symbol: string,
    _underlying: string,
    _collateral: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setAdjustSpeed(
    newAdjustSpeed: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setBorrowTracker(
    newBorrowTracker: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setFactory(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setKinkUtilizationRate(
    newKinkUtilizationRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setReserveFactor(
    newReserveFactor: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  accrualTimestamp(overrides?: CallOverrides): Promise<number>;

  accrueInterest(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adjustSpeed(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    borrower: string,
    receiver: string,
    borrowAmount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowAllowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowApprove(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowBalance(
    borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

  borrowPermit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowRate(overrides?: CallOverrides): Promise<number>;

  borrowTracker(overrides?: CallOverrides): Promise<string>;

  collateral(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  exchangeRate(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exchangeRateLast(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<number>;

  kinkBorrowRate(overrides?: CallOverrides): Promise<number>;

  kinkUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    borrower: string,
    liquidator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mint(
    minter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rateUpdateTimestamp(overrides?: CallOverrides): Promise<number>;

  redeem(
    redeemer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

  skim(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  sync(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  trackBorrow(
    borrower: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADJUST_SPEED_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    ADJUST_SPEED_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    BORROW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    BORROW_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    KINK_BORROW_RATE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    KINK_BORROW_RATE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    KINK_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    KINK_UR_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    KINK_UR_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    RESERVE_FACTOR_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    _initialize(
      _name: string,
      _symbol: string,
      _underlying: string,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _setAdjustSpeed(
      newAdjustSpeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setBorrowTracker(
      newBorrowTracker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _setFactory(overrides?: CallOverrides): Promise<void>;

    _setKinkUtilizationRate(
      newKinkUtilizationRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setReserveFactor(
      newReserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    accrualTimestamp(overrides?: CallOverrides): Promise<number>;

    accrueInterest(overrides?: CallOverrides): Promise<void>;

    adjustSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      borrower: string,
      receiver: string,
      borrowAmount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowAllowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowApprove(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    borrowBalance(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    borrowPermit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowRate(overrides?: CallOverrides): Promise<number>;

    borrowTracker(overrides?: CallOverrides): Promise<string>;

    collateral(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateLast(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<number>;

    kinkBorrowRate(overrides?: CallOverrides): Promise<number>;

    kinkUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      borrower: string,
      liquidator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(minter: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rateUpdateTimestamp(overrides?: CallOverrides): Promise<number>;

    redeem(redeemer: string, overrides?: CallOverrides): Promise<BigNumber>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    skim(to: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    trackBorrow(borrower: string, overrides?: CallOverrides): Promise<void>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AccrueInterest(uint256,uint256,uint256)"(
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null
    ): AccrueInterestEventFilter;
    AccrueInterest(
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null
    ): AccrueInterestEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Borrow(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      borrower?: string | null,
      receiver?: string | null,
      borrowAmount?: null,
      repayAmount?: null,
      accountBorrowsPrior?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): BorrowEventFilter;
    Borrow(
      sender?: string | null,
      borrower?: string | null,
      receiver?: string | null,
      borrowAmount?: null,
      repayAmount?: null,
      accountBorrowsPrior?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): BorrowEventFilter;

    "BorrowApproval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): BorrowApprovalEventFilter;
    BorrowApproval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): BorrowApprovalEventFilter;

    "CalculateBorrowRate(uint256)"(
      borrowRate?: null
    ): CalculateBorrowRateEventFilter;
    CalculateBorrowRate(borrowRate?: null): CalculateBorrowRateEventFilter;

    "CalculateKink(uint256)"(kinkRate?: null): CalculateKinkEventFilter;
    CalculateKink(kinkRate?: null): CalculateKinkEventFilter;

    "CalculateKinkBorrowRate(uint256)"(
      kinkBorrowRate?: null
    ): CalculateKinkBorrowRateEventFilter;
    CalculateKinkBorrowRate(
      kinkBorrowRate?: null
    ): CalculateKinkBorrowRateEventFilter;

    "Liquidate(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      borrower?: string | null,
      liquidator?: string | null,
      seizeTokens?: null,
      repayAmount?: null,
      accountBorrowsPrior?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): LiquidateEventFilter;
    Liquidate(
      sender?: string | null,
      borrower?: string | null,
      liquidator?: string | null,
      seizeTokens?: null,
      repayAmount?: null,
      accountBorrowsPrior?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): LiquidateEventFilter;

    "Mint(address,address,uint256,uint256)"(
      sender?: string | null,
      minter?: string | null,
      mintAmount?: null,
      mintTokens?: null
    ): MintEventFilter;
    Mint(
      sender?: string | null,
      minter?: string | null,
      mintAmount?: null,
      mintTokens?: null
    ): MintEventFilter;

    "NewAdjustSpeed(uint256)"(newAdjustSpeed?: null): NewAdjustSpeedEventFilter;
    NewAdjustSpeed(newAdjustSpeed?: null): NewAdjustSpeedEventFilter;

    "NewBorrowTracker(address)"(
      newBorrowTracker?: null
    ): NewBorrowTrackerEventFilter;
    NewBorrowTracker(newBorrowTracker?: null): NewBorrowTrackerEventFilter;

    "NewKinkUtilizationRate(uint256)"(
      newKinkUtilizationRate?: null
    ): NewKinkUtilizationRateEventFilter;
    NewKinkUtilizationRate(
      newKinkUtilizationRate?: null
    ): NewKinkUtilizationRateEventFilter;

    "NewReserveFactor(uint256)"(
      newReserveFactor?: null
    ): NewReserveFactorEventFilter;
    NewReserveFactor(newReserveFactor?: null): NewReserveFactorEventFilter;

    "Redeem(address,address,uint256,uint256)"(
      sender?: string | null,
      redeemer?: string | null,
      redeemAmount?: null,
      redeemTokens?: null
    ): RedeemEventFilter;
    Redeem(
      sender?: string | null,
      redeemer?: string | null,
      redeemAmount?: null,
      redeemTokens?: null
    ): RedeemEventFilter;

    "Sync(uint256)"(totalBalance?: null): SyncEventFilter;
    Sync(totalBalance?: null): SyncEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    ADJUST_SPEED_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    ADJUST_SPEED_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    BORROW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    BORROW_PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    KINK_BORROW_RATE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    KINK_BORROW_RATE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    KINK_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    KINK_UR_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    KINK_UR_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    RESERVE_FACTOR_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    _initialize(
      _name: string,
      _symbol: string,
      _underlying: string,
      _collateral: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setAdjustSpeed(
      newAdjustSpeed: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setBorrowTracker(
      newBorrowTracker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setFactory(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    _setKinkUtilizationRate(
      newKinkUtilizationRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setReserveFactor(
      newReserveFactor: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    accrualTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adjustSpeed(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      borrower: string,
      receiver: string,
      borrowAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowAllowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowApprove(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowBalance(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    borrowPermit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    borrowTracker(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    exchangeRateLast(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    kinkBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    kinkUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      borrower: string,
      liquidator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mint(
      minter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rateUpdateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      redeemer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    skim(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    sync(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    trackBorrow(
      borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADJUST_SPEED_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ADJUST_SPEED_MIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BORROW_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BORROW_PERMIT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KINK_BORROW_RATE_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KINK_BORROW_RATE_MIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KINK_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KINK_UR_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KINK_UR_MIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESERVE_FACTOR_MAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _initialize(
      _name: string,
      _symbol: string,
      _underlying: string,
      _collateral: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setAdjustSpeed(
      newAdjustSpeed: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setBorrowTracker(
      newBorrowTracker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setFactory(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setKinkUtilizationRate(
      newKinkUtilizationRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setReserveFactor(
      newReserveFactor: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    accrualTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueInterest(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adjustSpeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      borrower: string,
      receiver: string,
      borrowAmount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowAllowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowApprove(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowBalance(
      borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowPermit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exchangeRateLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kinkBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kinkUtilizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      borrower: string,
      liquidator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mint(
      minter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rateUpdateTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      redeemer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skim(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trackBorrow(
      borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
