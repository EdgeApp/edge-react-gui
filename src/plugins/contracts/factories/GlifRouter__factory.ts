/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { GlifRouter, GlifRouterInterface } from "../GlifRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidParams",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPoolID",
    type: "error",
  },
  {
    inputs: [],
    name: "RouteDNE",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newRoute",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
    ],
    name: "PushRoute",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "agentID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "poolID",
        type: "uint256",
      },
    ],
    name: "createAccountKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "agentID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "poolID",
        type: "uint256",
      },
    ],
    name: "getAccount",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startEpoch",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "principal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "epochsPaid",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "defaulted",
            type: "bool",
          },
        ],
        internalType: "struct Account",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
    ],
    name: "getRoute",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
    ],
    name: "getRoute",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
      {
        internalType: "address",
        name: "newRoute",
        type: "address",
      },
    ],
    name: "pushRoute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "id",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "newRoute",
        type: "address",
      },
    ],
    name: "pushRoute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "ids",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "newRoutes",
        type: "address[]",
      },
    ],
    name: "pushRoutes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "ids",
        type: "bytes4[]",
      },
      {
        internalType: "address[]",
        name: "newRoutes",
        type: "address[]",
      },
    ],
    name: "pushRoutes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "route",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "agentID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "poolID",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "startEpoch",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "principal",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "epochsPaid",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "defaulted",
            type: "bool",
          },
        ],
        internalType: "struct Account",
        name: "account",
        type: "tuple",
      },
    ],
    name: "setAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class GlifRouter__factory {
  static readonly abi = _abi;
  static createInterface(): GlifRouterInterface {
    return new utils.Interface(_abi) as GlifRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GlifRouter {
    return new Contract(address, _abi, signerOrProvider) as GlifRouter;
  }
}
